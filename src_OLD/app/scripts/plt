#!/usr/bin/perl

# I don't like this at all, but I don't see a good way out of it.
# It appears to be quite difficult to manipulate this search path
# in an appropriate way, and invoking perl with the -I option looks
# bad too.
use lib $ENV{"MOLECULIZER_PERL_PATH"};
use Getopt::Std;
use gpFunctions;

my $usage =
  "usage:\n plt {-r} {-l} {-p | -n | -f | -s} {-t title} "
  . "{-y yAxisLabel} dataFile {header ...}\n";

getopts('rlpnfst:y:') or die "plt: bad option given.  $usage";

# Check that no more than one of the options for non-X
# output has been selected.
my $scriptOptionCount = 0;
if($opt_p) { $scriptOptionCount++ };
if($opt_n) { $scriptOptionCount++ };
if($opt_f) { $scriptOptionCount++ };
if($opt_s) { $scriptOptionCount++ };
if(1 < $scriptOptionCount) {
  die "plt: use only one of options -pnfs. $usage";
}

# Check that if the reload option -r was selected, then
# we are sending output to X or to a script.
if($opt_r && ($opt_p || $opt_f || $opt_n)) {
  die "plt: cannot reload (-r) with postscript (-p) or fig (-f) output.\n";
}

if(! @ARGV) {
  die "plt: missing data file name. $usage";
}
my $dataFileName = shift;

# Default the plot title and the label on the y-axis.
my $plotTitle = $opt_t ? $opt_t : $dataFileName;
my $yLabel = $opt_y ? $opt_y : "Number of molecules";

# Open the global temporary Gnuplot script file.
my $gpScriptFileName = "/tmp/plt_tmp_$$";
open GPSCRIPTFILE, ">$gpScriptFileName"
  or die "Could not open temporary Gnuplot script "
  . "$gpScriptFileName for writing: $!";

# Write the script.
writeScript(*GPSCRIPTFILE,
	    "dataFileName" => $dataFileName,
	    "headersToPlot" => \@ARGV,
	    "yLabel" => $yLabel,
	    "plotTitle" => $plotTitle,
	    "legendTitle" => "Legend",
	    "logPlot" => $opt_l,
	    "postScript" => $opt_p,
	    "fig" => $opt_f,
	    "png" => $opt_n,
	    "reload" => $opt_r);

# Close the temporary script file.
close GPSCRIPTFILE;

# If generating PostScript or Fig output, run gnuplot "batch mode."
if($opt_p || $opt_f) {
  system("gnuplot $gpScriptFileName");
}
# If generating a gnuplot script, don't invoke gnuplot at all.
elsif ($opt_s) {
  open GPSCRIPTFILE, "$gpScriptFileName"
    or die "Could not open temporary Gnuplot script "
      . "$gpScriptFileName for reading: $!";

  while(<GPSCRIPTFILE>) { print; }

  close GPSCRIPTFILE;
}
# Otherwise, invoke gnuplot to plot to the screen interactively.
else {
  system("gnuplot -persist $gpScriptFileName");
}


# Delete the temporary script file.
unlink $gpScriptFileName;








