=== Parameters ============

    A = 10.0
    something = (A+3)*3

=== Mols ===============================
   GDP, 
   	mass = 100.0;

   GTP, 
   	mass = 110.0;

   Ste2(to-Ste4,  to-alpha), 
   	mass = 100.0,
	preferred_state = {top, front}; # This is a smoldyn extension 
	
   Ste4(to-Ste2, to-Gpa1, to-Ste5 {default, obstructed}, to-Fus3, *ModSite {None, Phosphorylated, DoublyPhosphorylated} ),
        mass = 100.0;

   Ste5( to-Ste4, to-Ste11, to-Ste7, to-Fus3),
        mass = 100.0;

   Gpa1( to-Ste4 { default, GTP-bound-shape}, to-GXP { default, bound-shape} ),
   	 mass = 100.0;

   alpha,
	mass = 100.0;

=== Allosteric-Plexes =================
=== Allosteric-Omnis  =================
    # This L <- R assignment isn't really standard, but it does allow someone to scan the 
    # results of an allosteric-omni/plex, rather than the causes...

    Ste4(to-Ste5!1, to-Gpa {obstructed}).Ste5(to-Ste-4!1) <- Ste4(to-Ste5!1,to-Gpa1 {*} ).Ste5(to-Ste-4!1)  -> 
    Gpa1(to-Ste4!1).Ste4(to-Gpa1!1, to-Ste5 {obstructed} ) <- Gpa1(to-Ste4!1).Ste4(to-Gpa1!1, to-Ste5 {*} ) 
    Ste2(to-alpha!1, to-Ste4!2 ).Ste4(to-Ste2!2, to-Gpa1!2).Gpa1(to-Ste4!2, to-GXP {bound-shape} ).alpha(!1) <- Ste2(to-alpha!1, to-Ste4!2 ).Ste4(to-Ste2!2, to-Gpa1!2).Gpa1(to-Ste4!2, to-GXP {*} ).alpha(!1)
    Gpa1(to-GXP!1, to-Ste4 {*} ).GTP(!1) <- Gpa1(to-GXP!1, to-Ste4 {*} ).GTP(!1)

=== Reaction-Rules ====================

=== Dimerization-Gens =====
    Gpa1(to-Ste4) + Ste4(to-Gpa1) -> Gpa1(to-Ste4!1).Ste4(to-Gpa1!1)
    # "Gpa1(to-Ste4 {default} ) + Ste4(to-Gpa1 {default} ) -> Gpa1(to-Ste4!1).Ste4(to-Gpa1!1)" is equivalent...
         kon = 1.0e12,
	 koff = 1.0,
      Gpa1(to-Ste4 {GTP-bound-shape} ) + Ste4(to-Gpa1 {default} ) -> Gpa1(to-Ste4!1).Ste4(to-Gpa1!1),
           kon = x,
	   koff = y,
      Gpa1(to-Ste4 {GTP-bound-shape} ) + Ste4(to-Gpa1 {obstructed} ) -> Gpa1(to-Ste4!1).Ste4(to-Gpa1!1),
           kon = x,
	   koff = y
      Gpa1(to-Ste4 {default} ) + Ste4(to-Gpa1 {obstructed} ) -> Gpa1(to-Ste4!1).Ste4(to-Gpa1!1),
           kon = x,
	   koff = y;

    #
    # Gpa1/GTP/GTP binding 
    #
    Gpa1(to-GXP) + GTP() -> Gpa1(to-GXP!1).GTP(1!),
     	   kon = 1,0,
	   koff = 1.0e-10,
      Gpa1(to-GXP {bound-shape} ) + GTP() -> Gpa1(to-GXP!1).GTP(1!),
             kon = 1.0e12,
	     koff = 1.0e-10;


    Gpa1(to-GXP) + GDP() -> Gpa1(to-GXP!1).GDP(1!),
     	   kon = 1.0e12,
	   koff = 1.0e-10,
      Gpa1(to-GXP {bound-shape} ) + GDP() -> Gpa1(to-GXP!1).GDP(1!),
             kon = 1.0,
	     koff = 1.0e10;

    #
    # Ste4/Ste5 binding
    #
    Ste4(to-Ste5) + Ste5(to-Ste4) -> Ste4(to-Ste5!1).Ste5(to-Ste4!1),
           kon = 1.0e10,
	   koff = 1.0,
       Ste4(to-Ste5 {obstructed} ) + Ste5(to-Ste4) -> Ste4(to-Ste5!1).Ste5(to-Ste4!1),
             kon = 1.0,
	     koff = 1.0e10;

    #
    # Ste2/Ste4 Binding 
    #
    Ste2(to-Ste4) + Ste4(to-Ste2) -> Ste2(to-Ste4!1).Ste4(to-Ste2!1),
           kon = 1.0e12,
	   koff = 1.0;

    #
    # alpha/Receptor Binding
    #
    alpha() + Ste2(to-alpha) -> alpha(!1).Ste2(to-alpha!1),
    	   kon = 1.0e12,
	   koff = 1.0;

=== Omni-Gens =============
    # phosphate is in the additional-product
    Gpa1(the-GXP!1).GTP(!1) -> Gpa1(the-GXP!1).GDP(!1) + phosphate,
    	   k = 1.0e2;		  

=== Uni-Mol-Gens ==========

=== Explicit-Species ====================
=== Species-Streams =====================
	

	
	
   
   
   	
