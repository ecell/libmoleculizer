/////////////////////////////////////////////////////////////////////////////
// Moleculizer - a stochastic simulator for cellular chemistry.
// Copyright (C) 2001  Walter Lawrence (Larry) Lok.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//    
// Contact information:
//   Larry Lok, Research Fellow          Voice: 510-981-8740
//   The Molecular Sciences Institute      Fax: 510-647-0699
//   2168 Shattuck Ave.                  Email: lok@molsci.org
//   Berkeley, CA 94704
/////////////////////////////////////////////////////////////////////////////

#ifndef BNDOMNIEXTRAP_H
#define BNDOMNIEXTRAP_H

#include "plex/cxOmniParam.hh"

namespace bndKinase
{
  class bndOmniExtrapolator
  {
  public:
    virtual
    ~bndOmniExtrapolator(void)
    {}

    // Reactions generated by bndOmniRxnGen can be either unary or binary.  If
    // they are binary, then the additional reactant is independent of the
    // 'triggering species", and so is passed through the extrapolator's
    // constructor.
    virtual
    double
    getRate(const plx::cxOmni& rContext) const = 0;
  };

  class bndOmniNoExtrap :
    public bndOmniExtrapolator
  {
    double rate;
    
  public:
    bndOmniNoExtrap(double theRate) :
      rate(theRate)
    {}

    double
    getRate(const plx::cxOmni& rContext) const
    {
      return rate;
    }
  };

  class bndOmniMassExtrap :
    public bndOmniExtrapolator
  {
    // Pointer to "massive" part of optional auxiliary species.  If this is
    // null, then the reactions being generated are unary, and
    // "rateOrInvariant" is an ordinary unary reaction rate.  If this is
    // non-null, then the reactions being generated are binary, and
    // "rateOrInvariant" is a binding invariant.
    const mzr::massive* pMassive;
    
    // This is the rate if the reactions being generated are unary (0 ==
    // pMassive) but it's the binding invariant if the reactions are binary,
    // in which case pMassive points to the auxililary massive species.
    double rateOrInvariant;

  public:
    // For creating unary reactions.
    bndOmniMassExtrap(double theRate) :
      pMassive(0),
      rateOrInvariant(theRate)
    {}

    // For creating binary reactions.
    //
    // I hope that I can really make a default species at the time that I
    // create this extrapolator.  (Oddly, never done before.)
    bndOmniMassExtrap(double theRate,
		      const mzr::massive* pDefaultTriggeringSpecies,
		      const mzr::massive* pMassiveAuxiliarySpecies);

    double
    getRate(const plx::cxOmni& rWrappedContext) const;
  };
}

#endif // BNDOMNIEXTRAP_H
