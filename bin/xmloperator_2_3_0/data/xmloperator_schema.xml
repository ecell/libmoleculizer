<?xml version="1.0" encoding="UTF-8"?>
<schema lastUpdate="2003-08-29" productName="xmloperator" productVersion="2.3" version="1.3" xmlns="http://www.xmloperator.net/namespace/schema"
><description
>This is an object schema of the xmloperator tool.<br
/>Its aims to offer a facility to understand the software, not to be complete or in exact conformity with the source code.</description><package id="p_basicTypes" name="basicTypes"
><description
>This package contains basic types.</description><class id="c_boolean" name="Boolean" type="enumeration"
><instance id="false" name="FALSE"
/><instance id="true" name="TRUE"
/></class><class id="c_integer" name="Integer" type="elementary"
><instance id="zero" name="ZERO"
/><instance id="one" name="ONE"
/></class><class id="c_string" name="String" type="elementary"
><instance id="emptyString" name="EMPTY_STRING"
/></class><class id="c_object" name="Object" type="standard"
><instance id="null" name="NULL"
/></class></package><package id="p_dom" name="dom"
><description
>This package contains DOM classes.</description><class id="c_NodeType" name="NodeType" type="enumeration"
><instance id="ELEMENT_NODE" name="ELEMENT_NODE"
/><instance id="TEXT_NODE" name="TEXT_NODE"
/><instance id="CDATA_SECTION_NODE" name="CDATA_SECTION_NODE"
/><instance id="ENTITY_REFERENCE_NODE" name="ENTITY_REFERENCE_NODE"
/><instance id="PROCESSING_INSTRUCTION_NODE" name="PROCESSING_INSTRUCTION_NODE"
/><instance id="COMMENT_NODE" name="COMMENT_NODE"
/><instance id="DOCUMENT_NODE" name="DOCUMENT_NODE"
/><instance id="DOCUMENT_TYPE_NODE" name="DOCUMENT_TYPE_NODE"
/></class><class id="c_Node" name="Node" type="interface"
><property id="nodeType" multiplicity="one" name="nodeType" reference="c_NodeType" type="readonly"
/><property id="nodeName" multiplicity="zeroOrOne" name="nodeName" reference="c_string" type="readonly"
/><property id="nodeValue" multiplicity="zeroOrOne" name="nodeValue" reference="c_string" type="standard"
/><property id="parentNode" multiplicity="zeroOrOne" name="parentNode" reference="c_Node" type="readonly"
/><property id="childNodes" multiplicity="one" name="childNodes" reference="c_NodeList" type="standard"
/><property id="ownerDocument" multiplicity="one" name="ownerDocument" reference="c_Document" type="readonly"
/></class><class id="c_NodeList" name="NodeList" type="interface"
><property id="nodeCount" multiplicity="one" name="nodeCount" reference="c_integer" type="readonly"
/><property id="node" multiplicity="zeroOrMore" name="node" reference="c_Node" type="readonly"
/></class><class generalisation="c_Node" id="c_Element" name="Element" type="interface"
><property generalisation="nodeType" id="e_nodeType" init="ELEMENT_NODE" multiplicity="one" name="nodeType" reference="c_NodeType" type="readonly"
/><property generalisation="nodeName" id="elementName" multiplicity="one" name="elementName" reference="c_string" type="readonly"
/><property id="attributeCount" multiplicity="one" name="attributeCount" reference="c_integer" type="readonly"
/><property id="attribute" multiplicity="zeroOrMore" name="attribute" reference="c_Attribute" type="readonly"
/></class><class id="c_Attribute" name="Attribute" type="final"
><property id="a_name" multiplicity="one" name="name" reference="c_string" type="readonly"
/><property id="a_value" multiplicity="one" name="value" reference="c_string" type="standard"
/></class><class generalisation="c_Node" id="c_TextNode" name="TextNode" type="interface"
><property generalisation="nodeType" id="t_nodeType" init="TEXT_NODE" multiplicity="one" name="nodeType" reference="c_NodeType" type="readonly"
/></class><class generalisation="c_Node" id="c_Document" name="Document" type="interface"
><property generalisation="nodeType" id="d_nodeType" init="DOCUMENT_NODE" multiplicity="one" name="nodeType" reference="c_NodeType" type="readonly"
/><property id="documentElement" multiplicity="one" name="documentElement" reference="c_Element" type="readonly"
/><method id="createNode" name="createNode" reference="c_Node" type="abstract"
><argument id="cn_nodeType" multiplicity="one" name="nodeType" reference="c_NodeType" type="in"
/><argument id="cn_nodeName" multiplicity="one" name="nodeName" reference="c_string" type="in"
/></method><method id="importNode" name="importNode" reference="c_Node" type="abstract"
><argument id="in_node" multiplicity="one" name="node" reference="c_Node" type="in"
/></method></class></package><package id="p_transformation" name="transformation"
><description
>This package contains transform classes. It maps to javax.xml.transform.</description><class id="c_Parameter" name="Parameter" type="interface"
><description
>This is the interface of a conversion parameter.</description><property id="par_name" multiplicity="one" name="name" reference="c_string" type="readonly"
/><property id="par_value" multiplicity="one" name="value" reference="c_string" type="standard"
/></class><class id="c_Source" name="Source" type="interface"
><description
>Source for an XML document.</description></class><class id="c_Result" name="Result" type="interface"
><description
>Result of the transformation of an XML document.</description></class><class id="c_Transformer" name="Transformer" type="interface"
><description
>Transformer of an XML document.</description><property id="dc_parameter" multiplicity="zeroOrMore" name="parameter" reference="c_Parameter" type="readonly"
/><method id="tr_transform" name="transform" type="abstract"
><argument id="trt_source" multiplicity="one" name="source" reference="c_Source" type="in"
/><argument id="trt_result" multiplicity="one" name="result" reference="c_Result" type="in"
/><description
>Transform a source document and produce a result document.</description></method></class></package><package id="p_xmloperator" name="xmloperator"
><description
>This package contains all the tool classes.</description><package id="p_framework" name="framework"
><description
>This package contains the interfaces between the different parts of the tool.</description><package id="p_f_util" name="util"
><description
>This package contains the "Observer" interface.</description><class id="c_observer" name="Observer" type="interface"
><description
>Observer part in a Observer - Observable design pattern.</description><method id="o_update" name="update" type="abstract"
><argument id="o_update_observable" multiplicity="one" name="observable" reference="c_object" type="in"
/><description
>Updates itself relatively to the observable<reference name="observable" reference="o_update_observable"
/>.</description></method></class></package><package id="p_f_option" name="option"
><description
>This package contains interfaces for options access.</description><package id="p_o_part" name="part"
><description
>This package contains interface for option parts access.</description><class id="c_optionPartType" name="OptionPartType" type="interface"
><description
>Type of an option part.</description></class><class id="c_optionPart" name="OptionPart" type="interface"
><description
>Option part. Encapsulates a String, an int or a boolean.</description><property id="o_optionPartType" multiplicity="one" name="optionPartType" reference="c_optionPartType" type="readonly"
/></class></package><class id="c_optionType" name="OptionType" type="interface"
><description
>Type of an option</description><property id="ot_optionPartType" multiplicity="oneOrMore" name="optionPartType" reference="c_optionPartType" type="readonly"
/></class><class id="c_option" name="Option" type="interface"
><description
>An option can be saved and restored.</description><property id="o_optionType" multiplicity="one" name="optionType" reference="c_optionType" type="readonly"
/><property id="o_optionPart" multiplicity="oneOrMore" name="optionPart" reference="c_optionPart" type="standard"
/></class><class id="c_options" name="Options" type="interface"
><method id="getOption" name="getOption" reference="c_option" type="abstract"
><argument id="optionIdentifier" multiplicity="one" name="optionIdentifier" reference="c_string" type="in"
/></method><method id="setOption" name="setOption" type="standard"
><argument id="s_optionIdentifier" multiplicity="one" name="optionIdentifier" reference="c_string" type="in"
/><argument id="s_option" multiplicity="one" name="option" reference="c_option" type="in"
/></method></class></package><package id="p_f_document" name="document"
><description
>Classes of this package are interfaces which define an XML document and its accessories.</description><package id="p_f_id" name="id"
><description
>Classes of this package are interfaces which define ID management.</description><class id="c_IdInfo" name="IdInfo" type="interface"
><description
>Informations about an element which contains an ID attribute.</description><property id="ii_idAttribute" multiplicity="one" name="idAttribute" reference="c_Attribute" type="readonly"
/><method id="ii_getReferencers" name="getReferencers" type="abstract"
><argument id="ii_getReferencers_referencer" multiplicity="zeroOrMore" name="referencer" reference="c_Attribute" type="out"
/></method></class><class id="c_IdManager" name="IdManager" type="interface"
><description
>This is the interface for ID management.</description><method id="im_getIdElementInfo" name="getIdElementInfo" reference="c_IdInfo" type="abstract"
><argument id="im_getIdElementInfo_id" multiplicity="one" name="id" reference="c_string" type="in"
/></method><method id="im_addId" name="addId" type="abstract"
><argument id="im_addId_idAttr" multiplicity="one" name="idAttr" reference="c_Attribute" type="in"
/><description
>Takes into account that the attribute <reference name="idAttrName" reference="im_addId_idAttr"
/> has a significant ID value.</description></method><method id="im_removeId" name="removeId" type="abstract"
><argument id="im_removeId_attribute" multiplicity="one" name="attribute" reference="c_Attribute" type="in"
/><description
>detachs the ID value from the attribute <reference name="attribute" reference="im_removeId_attribute"
/>.</description></method><method id="im_addIdRef" name="addIdRef" type="abstract"
><argument id="im_addIdRef_idRefAttribute" multiplicity="one" name="idRefAttribute" reference="c_Attribute" type="in"
/><description
>Takes into account that the attribute <reference name="idRefAttribute" reference="im_addIdRef_idRefAttribute"
/> has a significant REFID value.</description></method><method id="im_removeIdRef" name="removeIdRef" type="standard"
><argument id="im_removeIdRef_idRefAttribute" multiplicity="one" name="idRefAttribute" reference="c_Attribute" type="in"
/><description
>remove the reference defined by the attribute <reference name="idRefAttribute" reference="im_removeIdRef_idRefAttribute"
/>.</description></method></class></package><package id="p_f_dtd" name="dtd"
><description
>Classes of this package are interfaces which describe DTD access.</description><class id="c_multiplicity" name="Multiplicity" type="enumeration"
><instance id="d_one" name="One"
/><instance id="d_zeroOrOne" name="ZeroOrOne"
/><instance id="d_oneOrMore" name="OneOrMore"
/><instance id="d_zeroOrMore" name="ZeroOrMore"
/></class><class id="c_specificationNode" name="SpecificationNode" type="interface"
><description
>A specification node is a node in an element content model tree. It is produced by the parsing of a Document Type Definition parsing.</description><property id="sn_multiplicity" multiplicity="one" name="multiplicity" reference="c_multiplicity" type="readonly"
/><property id="sn_elementName" multiplicity="zeroOrOne" name="elementName" reference="c_string" type="readonly"
><description
>defined only for leaf node (childcount == 0).</description></property><property id="sn_isSequence" multiplicity="zeroOrOne" name="isSequence" reference="c_boolean" type="readonly"
><description
>defined only for not leaf node (childcount != 0). <reference name="true" reference="true"
/> for a sequence, <reference name="false" reference="false"
/> for a choice.</description></property><property id="sn_childCount" multiplicity="one" name="childCount" reference="c_integer" type="readonly"
><description
>childs count. 0 for a leaf.</description></property><property id="sn_child" multiplicity="zeroOrMore" name="child" reference="c_specificationNode" type="readonly"
><description
>childs count is <reference name="childCount" reference="sn_childCount"
/></description></property></class><class id="c_specificationType" name="SpecificationType" type="enumeration"
><instance id="st_any" name="Any"
/><instance id="st_empty" name="Empty"
/><instance id="st_children" name="Children"
/><instance id="st_mixed" name="Mixed"
/></class><class id="c_elementSpecification" name="ElementSpecification" type="interface"
><description
>An ElementSpecification is the part of a DTD which describes the possible contents of an element.</description><property id="es_specificationType" multiplicity="one" name="specificationType" reference="c_specificationType" type="readonly"
/><property id="es_specificationNode" multiplicity="zeroOrOne" name="specificationNode" reference="c_specificationNode" type="readonly"
/></class><class id="c_attributeType" name="AttributeType" type="enumeration"
><instance id="at_cdata" name="Cdata"
/><instance id="at_id" name="Id"
/><instance id="at_idRef" name="IdRef"
/><instance id="at_idRefs" name="IdRefs"
/><instance id="at_entity" name="Entity"
/><instance id="at_entities" name="Entities"
/><instance id="at_nmToken" name="NmToken"
/><instance id="at_nmTokens" name="NmTokens"
/><instance id="at_notation" name="Notation"
/><instance id="at_enumeration" name="Enumeration"
/></class><class id="c_attributeDefaultType" name="AttributeDefaultType" type="enumeration"
><instance id="adt_required" name="Required"
/><instance id="adt_implied" name="Implied"
/><instance id="adt_fixed" name="Fixed"
/><instance id="adt_default" name="Default"
/></class><class id="c_attributeDefinition" name="AttributeDefinition" type="interface"
><description
>An AttributeDefinition is the part of a DTD which describes an attribute of an element.</description><property id="ad_attrName" multiplicity="one" name="attrName" reference="c_string" type="readonly"
/><property id="ad_attrType" multiplicity="one" name="attrType" reference="c_attributeType" type="readonly"
/><property id="ad_enumerationString" multiplicity="one" name="enumerationString" reference="c_string" type="readonly"
/><property id="ad_attrDefaultType" multiplicity="one" name="attrDefaultType" reference="c_attributeDefaultType" type="readonly"
/><property id="ad_attrDefaultValue" multiplicity="one" name="attrDefaultValue" reference="c_string" type="readonly"
/></class><class id="c_attributeDefinitions" name="AttributeDefinitions" type="interface"
><description
>AttributeDefinition collection of an element.</description><property id="ad_attributeDefinition" multiplicity="oneOrMore" name="attributeDefinition" reference="c_attributeDefinition" type="readonly"
/></class><class id="c_entityDefinition" name="EntityDefinition" type="interface"
><description
>Definition of an entity, witin a DTD.</description></class><class id="c_externalDefinition" name="EXternalDefinition" type="interface"
><description
>An ExternalDefinition is the part of a DTD which allows accessing external data.</description></class><class id="c_dtd" name="DTD" type="interface"
><description
>This interface provides an access to the DTD specified by the document (internal and external) : element specification, attribute definition, .... It is read only.</description><property id="d_elementNames" multiplicity="zeroOrMore" name="elementNames" reference="c_string" type="readonly"
/><property id="d_entityNames" multiplicity="zeroOrMore" name="entityNames" reference="c_string" type="readonly"
/><property id="d_notationNames" multiplicity="zeroOrMore" name="notationNames" reference="c_string" type="readonly"
/><method id="d_getElementSpecification" name="getElementSpecification" reference="c_elementSpecification" type="abstract"
><argument id="ges_elementName" multiplicity="one" name="elementName" reference="c_string" type="in"
/></method><method id="d_getAttributeDefinitions" name="getAttributeDefinitions" reference="c_attributeDefinitions" type="abstract"
><argument id="gad_elementName" multiplicity="one" name="elementName" reference="c_string" type="in"
/></method><method id="d_getEntityDefinition" name="getEntityDefinition" reference="c_entityDefinition" type="abstract"
><argument id="ged_entityName" multiplicity="one" name="entityName" reference="c_string" type="in"
/></method><method id="d_getNotationDefinition" name="getNotationDefinition" reference="c_externalDefinition" type="abstract"
><argument id="gnd_notationName" multiplicity="one" name="notationName" reference="c_string" type="in"
/></method></class></package><package id="p_f_relaxng" name="relaxng"
><description
>Classes of this package are interfaces for relaxng schema readonly access.</description><class id="c_r_NameClassType" name="NameClassType" type="enumeration"
><instance id="NAMECLASS_ANYNAME" name="NAMECLASS_ANYNAME"
/><instance id="NAMECLASS_NSNAME" name="NAMECLASS_NSNAME"
/><instance id="NAMECLASS_NAME" name="NAMECLASS_NAME"
/><instance id="NAMECLASS_CHOICE" name="NAMECLASS_CHOICE"
/></class><class id="c_r_NameClass" name="NameClass" type="interface"
><description
>Ancestor of all the name class interfaces.</description><property id="nc_nameClassType" multiplicity="one" name="nameClassType" reference="c_r_NameClassType" type="readonly"
/></class><class generalisation="c_r_NameClass" id="c_r_Name" name="Name" type="interface"
><description
>Name class for one specific name.</description><property id="n_nsURI" multiplicity="one" name="nsURI" reference="c_string" type="readonly"
/><property id="n_name" multiplicity="one" name="name" reference="c_string" type="readonly"
/></class><class generalisation="c_r_NameClass" id="c_r_NsName" name="NsName" type="interface"
><description
>Name class for any name belonging to that namespace.</description><property id="nn_nsURI" multiplicity="one" name="nsURI" reference="c_string" type="readonly"
/><property id="nn_except" multiplicity="zeroOrOne" name="except" reference="c_r_NameClass" type="readonly"
/></class><class generalisation="c_r_NameClassType" id="c_r_AnyName" name="AnyName" type="interface"
><description
>Name class for any name.</description><property id="an_except" multiplicity="zeroOrOne" name="except" reference="c_r_NameClass" type="readonly"
/></class><class generalisation="c_r_NameClass" id="c_r_ChoiceNameClass" name="ChoiceNameClass" type="interface"
><description
>Name class for a choice among several name classes.</description><property id="cnc_child" multiplicity="oneOrMore" name="child" reference="c_r_NameClass" type="readonly"
/></class><class id="c_r_Pattern" name="Pattern" type="interface"
><description
>Ancestor of all the element structure pattern interfaces.</description><method id="rp_isEmpty" name="isEmpty" type="abstract"
/></class><class id="c_r_PatternType" name="PatternType" type="enumeration"
><instance id="PATTERN_TEXT" name="PATTERN_TEXT"
/><instance id="PATTERN_DATA" name="PATTERN_DATA"
/><instance id="PATTERN_VALUE" name="PATTERN_VALUE"
/><instance id="PATTERN_LIST" name="PATTERN_LIST"
/><instance id="PATTERN_ATTRIBUTE" name="PATTERN_ATTRIBUTE"
/><instance id="PATTERN_REF" name="PATTERN_REF"
/><instance id="PATTERN_GROUP" name="PATTERN_GROUP"
/></class><class generalisation="c_r_Pattern" id="c_r_NonEmptyPattern" name="NonEmptyPattern" type="interface"
><description
>Ancestor of all the non empty pattern interfaces.
Constraint : this.isEmpty() == false</description><property id="nep_patternType" multiplicity="one" name="patternType" reference="c_r_PatternType" type="readonly"
/><method id="nep_canBeRepeated" name="canBeRepeated" type="abstract"
><description
>Implements the "oneOrMore" pattern of the grammar.</description></method></class><class generalisation="c_r_NonEmptyPattern" id="c_r_Text" name="Text" type="interface"
><description
>Pattern for text.
Constraint : this.canBeRepeated() == false</description></class><class id="c_r_Param" name="Param" type="interface"
><description
>Data parameter.</description><property id="rp_name" multiplicity="one" name="name" reference="c_string" type="readonly"
/><property id="rp_value" multiplicity="one" name="value" reference="c_string" type="readonly"
/></class><class generalisation="c_r_NonEmptyPattern" id="c_r_Data" name="Data" type="interface"
><description
>Data pattern.</description><property id="da_type" multiplicity="one" name="type" reference="c_string" type="readonly"
/><property id="da_dataLibraryURI" multiplicity="one" name="dataLibraryURI" reference="c_string" type="readonly"
/><property id="da_param" multiplicity="zeroOrMore" name="param" reference="c_r_Param" type="readonly"
/><property id="da_except" multiplicity="zeroOrOne" name="except" reference="c_r_Pattern" type="readonly"
/></class><class generalisation="c_r_NonEmptyPattern" id="c_r_Value" name="Value" type="interface"
><description
>Value pattern.</description><property id="va_type" multiplicity="one" name="type" reference="c_string" type="readonly"
/><property id="va_dataLibraryURI" multiplicity="one" name="dataLibraryURI" reference="c_string" type="readonly"
/><property id="va_nsURI" multiplicity="one" name="nsURI" reference="c_string" type="readonly"
/><property id="va_value" multiplicity="one" name="value" reference="c_string" type="readonly"
/></class><class generalisation="c_r_NonEmptyPattern" id="c_r_ListPattern" name="ListPattern" type="interface"
><description
>List pattern.</description><property id="lp_pattern" multiplicity="one" name="pattern" reference="c_r_Pattern" type="readonly"
/></class><class generalisation="c_r_NonEmptyPattern" id="c_r_Attribute" name="Attribute" type="interface"
><description
>Attribute pattern.</description><property id="at_nameClass" multiplicity="one" name="nameClass" reference="c_r_NameClass" type="readonly"
/><property id="at_pattern" multiplicity="one" name="pattern" reference="c_r_Pattern" type="readonly"
/></class><class generalisation="c_r_NonEmptyPattern" id="c_r_Ref" name="Ref" type="interface"
><description
>Reference pattern.</description><property id="r_elementDefinition" multiplicity="one" name="elementDefinition" reference="c_r_ElementDefinition" type="readonly"
/></class><class id="c_r_groupType" name="GroupType" type="enumeration"
><instance id="GROUP_CHOICE_INCLUDING_EMPTY_PATTERN" name="GROUP_CHOICE_INCLUDING_EMPTY_PATTERN"
/><instance id="GROUP_CHOICE_EXCLUDING_EMPTY_PATTERN" name="GROUP_CHOICE_EXCLUDING_EMPTY_PATTERN"
/><instance id="GROUP_GROUP" name="GROUP_GROUP"
/><instance id="GROUP_INTERLEAVE" name="GROUP_INTERLEAVE"
/></class><class generalisation="c_r_NonEmptyPattern" id="c_r_GroupPattern" name="GroupPattern" type="interface"
><description
>Pattern class grouping "choice", "group" and "interleave" patterns.</description><property id="gp_groupType" multiplicity="one" name="groupType" reference="c_r_groupType" type="readonly"
/><property id="gp_child" multiplicity="oneOrMore" name="child" reference="c_r_NonEmptyPattern" type="readonly"
/></class><class id="c_r_ElementDefinition" name="ElementDefinition" type="interface"
><description
>Definition of an element within an XML document.</description><property id="ed_nameClass" multiplicity="one" name="nameClass" reference="c_r_NameClass" type="readonly"
/><property id="ed_pattern" multiplicity="zeroOrOne" name="pattern" reference="c_r_Pattern" type="readonly"
><description
>If no pattern then the element definition is not allowed.</description></property></class><class id="c_r_Schema" name="Schema" type="interface"
><description
>RELAX NG schema.</description><property id="s_elementDefinition" multiplicity="zeroOrMore" name="elementDefinition" reference="c_r_ElementDefinition" type="readonly"
/><property id="s_start" multiplicity="zeroOrOne" name="start" reference="c_r_Pattern" type="readonly"
><description
>Ref pattern, choice pattern or empty pattern.
If no pattern then the schema is not allowed.</description></property></class></package><package id="p_f_schema" name="schema"
><description
>This package contains schema relative editing capabilities interfaces.</description><class id="c_f_ElementContent" name="ElementContent" type="interface"
><description
>Maps a content to a content model in order to support content editing.<br
/>An elementSpec represents an element of the content or an element inside an entity referenced of the content.</description><property id="cc_elementSpec" multiplicity="zeroOrMore" name="elementSpec" reference="c_object" type="readonly"
><description
>case DTD : an elementSpec is an element name.<br
/>case RNG : an elementSpec is either a QualifiedName or an ElementDefinition.</description></property><property id="cc_elementDefinition" multiplicity="zeroOrMore" name="elementDefinition" reference="c_object" type="readonly"
><description
>case DTD : an elementDefinition is an element name.<br
/>case RNG : an elementDefinition is an <reference name="ElementDefinition" reference="c_r_ElementDefinition"
/>.</description></property><method id="cc_elementDefinitionsForReplace" name="elementDefinitionsForReplace" type="abstract"
><argument id="x9dd3" multiplicity="one" name="elementSpecIndex" reference="c_integer" type="in"
/><argument id="xf407" multiplicity="zeroOrMore" name="elementDefinition" reference="c_object" type="out"
/><description
>Return the set of element definitions of elements that could replace the element at the elementSpecIndex position.<br
/>Pre-condition : 0 &lt;= elementSpecIndex &lt; elementSpec count<br
/>Each element definition may be the first required element definition of a sequence of several required element definitions.</description></method><method id="cc_elementDefinitionsInsertableBefore" name="elementDefinitionsInsertableBefore" type="abstract"
><argument id="cci_elementSpecIndex" multiplicity="one" name="elementSpecIndex" reference="c_integer" type="in"
/><argument id="cci_elementDefinition" multiplicity="zeroOrMore" name="elementDefinition" reference="c_object" type="out"
/><description
>Return the set of element definitions of elements that could be inserted before the element at the elementSpecIndex position.<br
/>Pre-condition : 0 &lt;= elementSpecIndex &lt;= elementSpec count<br
/>Doesn't take into account the element definitions which can replace the element definition or its previous one.<br
/>Each element definition may be the first required element definition of a sequence of several required element definitions.</description></method></class><class id="c_f_AttributeType" name="AttributeType" type="enumeration"
><instance id="TYPE_CDATA" name="TYPE_CDATA"
/><instance id="TYPE_ID" name="TYPE_ID"
/><instance id="TYPE_IDREF" name="TYPE_IDREF"
/><instance id="TYPE_IDREFS" name="TYPE_IDREFS"
/><instance id="TYPE_ENUMERATION" name="TYPE_ENUMERATION"
/></class><class id="c_f_AttributesContent" name="AttributesContent" type="interface"
><description
>Maps the attribute set of an element to a content model in order to support attributes editing.<br
/>This release doesn't consider any constraint.</description><property id="ac_possibleName" multiplicity="zeroOrMore" name="possibleName" reference="c_string" type="readonly"
><description
>An NsName is represented by an empty local name.<br
/>An AnyName is represented by an empty prefix and an empty local name i.e. by ":".</description></property><method id="ac_getType" name="getType" type="abstract"
><argument id="acgt_attributeName" multiplicity="one" name="attributeName" reference="c_string" type="in"
/></method><method id="ac_getEnumeration" name="getEnumeration" type="abstract"
><argument id="acge_attributeName" multiplicity="one" name="attributeName" reference="c_string" type="in"
/></method><method id="ac_isRequired" name="isRequired" type="abstract"
><argument id="x14d1" multiplicity="one" name="attributeName" reference="c_string" type="in"
/></method><method id="ac_getIdAttributeName" name="getIdAttributeName" type="abstract"
><argument id="acgian_idAttributeName" multiplicity="zeroOrOne" name="idAttributeName" reference="c_string" type="out"
/></method></class></package><package id="p_fd_util" name="util"
><class generalisation="c_NodeList" id="c_VariableNodeList" name="VariableNodeList" type="interface"
><description
>Variable node list for receiving search result.</description><property id="vnl_observer" multiplicity="zeroOrOne" name="observer" reference="c_observer" type="standard"
/><method id="vnl_addNode" name="addNode" type="abstract"
><argument id="xc08f" multiplicity="one" name="node" reference="c_Node" type="in"
/></method><method id="vnl_removeNode" name="removeNode" type="abstract"
><argument id="xebfb" multiplicity="one" name="node" reference="c_Node" type="in"
/></method><method id="vnl_clear" name="clear" type="abstract"
/><method id="vnl_selectNodesWhichContain" name="selectNodesWhichContain" type="standard"
><argument id="xa479" multiplicity="one" name="document" reference="c_Document" type="in"
/><argument id="x80f2" multiplicity="one" name="text" reference="c_string" type="in"
/><argument id="xef89" multiplicity="one" name="isCaseIgnored" reference="c_boolean" type="in"
/></method></class><class id="c_FragmentAccess" name="FragmentAccess" type="interface"
><description
>Gives access to a fragment for copy / paste nodes.</description><property id="fa_observer" multiplicity="zeroOrOne" name="observer" reference="c_observer" type="standard"
/><property id="fa_fragment" multiplicity="zeroOrOne" name="fragment" reference="c_NodeList" type="standard"
/></class></package><package id="p_f_manage" name="manage"
><class id="c_NodeManager" name="NodeManager" type="interface"
><description
>Nodes management.</description><method id="ol_insertNode" name="insertNode" type="abstract"
><argument id="xafdc" multiplicity="oneOrMore" name="node" reference="c_Node" type="in"
/><description
>Insert the node and notify the event.</description></method><method id="ol_removeNode" name="removeNode" type="abstract"
><argument id="xd2be" multiplicity="oneOrMore" name="node" reference="c_Node" type="in"
/><description
>Remove the node and notify the event.</description></method><method id="ol_moveNode" name="moveNode" type="abstract"
><argument id="xb798" multiplicity="oneOrMore" name="node" reference="c_Node" type="in"
/><description
>move the node and notify the event.</description></method><method id="ol_setNodeValue" name="setNodeValue" type="abstract"
><argument id="x8a71" multiplicity="one" name="node" reference="c_Node" type="in"
/><description
>Set the new node value and notify the event.</description></method></class><class id="c_AttributeManager" name="AttributeManager" type="interface"
><description
>Attributes management with taking care of ids.</description><method id="am_setAttribute" name="setAttribute" type="abstract"
><argument id="amsa_element" multiplicity="one" name="element" reference="c_Element" type="in"
/><argument id="amsa_attributeName" multiplicity="one" name="attributeName" reference="c_string" type="in"
/><argument id="amsa_newValue" multiplicity="one" name="newValue" reference="c_string" type="in"
/><description
>Set the attribute named <reference name="attributeName" reference="amsa_attributeName"
/> of the element <reference name="element" reference="amsa_element"
/> to the value <reference name="newValue" reference="amsa_newValue"
/>, with taking care of ID management.</description></method></class><class id="c_AttributesContentAccess" name="AttributesContentAccess" type="interface"
><description
>An object which provides attributes content information.</description><method id="aca_getAttributesContent" name="getAttributesContent" reference="c_f_AttributesContent" type="abstract"
><argument id="x5c70" multiplicity="one" name="element" reference="c_Element" type="in"
/><argument id="x685e" multiplicity="zeroOrOne" name="attributesContent" reference="c_f_AttributesContent" type="out"
/><description
>Return the AttributesContent of <reference name="element" reference="x5c70"
/>.</description></method></class><class generalisation="c_AttributesContentAccess" id="c_ElementDefinitionMapper" name="ElementDefinitionMapper" type="interface"
><description
>Mapping from document to schema.</description><method id="edm_getElementDefinition" name="getElementDefinition" type="abstract"
><argument id="xea02" multiplicity="one" name="element" reference="c_Element" type="in"
/><argument id="x3fcd" multiplicity="zeroOrOne" name="elementDefinition" reference="c_object" type="out"
><description
>case DTD : return the element name.<br
/>case RNG : return the ElementDefinition associated to element.<br
/>Return nothing if no element definition can be associated to element.</description></argument></method><method id="edm_getElementContent" name="getElementContent" type="abstract"
><argument id="x27da" multiplicity="one" name="parentElement" reference="c_Element" type="in"
/><argument id="x832f" multiplicity="zeroOrOne" name="elementContent" reference="c_f_ElementContent" type="out"
><description
>Return the ElementContent of parentElement.<br
/>Return nothing if no usable element definition (with non empty pattern) can be associated to parentElement.</description></argument></method><method id="edm_isElementContentValid" name="isElementContentValid" reference="c_boolean" type="abstract"
><argument id="x9cd5" multiplicity="one" name="parentElement" reference="c_Element" type="in"
/><description
>Return true if the children content of parentElement is valid i.e. is conformant to its content model.
</description></method><method id="edm_removeElementFromCache" name="removeElementFromCache" type="abstract"
><argument id="xa9d2" multiplicity="one" name="parentElement" reference="c_Element" type="in"
/></method></class><class id="c_DocumentUtil" name="DocumentUtil" type="interface"
><description
>Methods for proposing or enabling possible operations.</description><method id="du_canElementHaveChilds" name="canElementHaveChilds" reference="c_boolean" type="abstract"
><argument id="xab6c" multiplicity="one" name="element" reference="c_Element" type="in"
/></method><method id="du_canElementHaveText" name="canElementHaveText" reference="c_boolean" type="abstract"
><argument id="xb726" multiplicity="one" name="element" reference="c_Element" type="in"
/></method><method id="du_shouldElementHaveText" name="shouldElementHaveText" reference="c_boolean" type="abstract"
><argument id="x4236" multiplicity="one" name="element" reference="c_Element" type="in"
/></method><method id="du_areElementNamesInsertable" name="areElementNamesInsertable" reference="c_boolean" type="abstract"
><argument id="x24fa" multiplicity="oneOrMore" name="insertedElementName" reference="c_string" type="in"
/><argument id="x31a2" multiplicity="one" name="parentElement" reference="c_Element" type="in"
/><argument id="xe226" multiplicity="one" name="nextSibling" reference="c_Node" type="in"
/></method><method id="du_isElementUnpackable" name="isElementUnpackable" reference="c_boolean" type="abstract"
><argument id="xd22d" multiplicity="one" name="element" reference="c_Element" type="in"
/></method><method id="du_isElementNameReplacable" name="isElementNameReplacable" reference="c_boolean" type="abstract"
><argument id="xb224" multiplicity="one" name="element" reference="c_Element" type="in"
/><argument id="x7b6c" multiplicity="one" name="newElementName" reference="c_string" type="in"
/></method><method id="du_elementNamesForAppend" name="elementNamesForAppend" type="abstract"
><argument id="x4232" multiplicity="one" name="parentElement" reference="c_Element" type="in"
/><argument id="x18df" multiplicity="zeroOrMore" name="elementName" reference="c_string" type="out"
/><description
>Return a set of element name which can be used for apending a first child element to parentElement.</description></method><method id="du_elementNamesForInsert" name="elementNamesForInsert" type="abstract"
><argument id="x7c2b" multiplicity="one" name="element" reference="c_Element" type="in"
/><argument id="xc9fc" multiplicity="one" name="isInsertedAfter" reference="c_boolean" type="in"
/><argument id="x6f5b" multiplicity="zeroOrMore" name="elementName" reference="c_string" type="out"
><description
>Return a set of element name which can be used for inserting after of before element (upon isInsertedAfter value).</description></argument></method><method id="du_elementNamesForReplace" name="elementNamesForReplace" type="abstract"
><argument id="x4a5e" multiplicity="one" name="node" reference="c_Node" type="in"
/><argument id="x3efb" multiplicity="zeroOrMore" name="elementName" reference="c_string" type="out"
><description
>Return a set of element name which can be used for replacing the node.</description></argument></method><method id="du_elementNamesForPack" name="elementNamesForPack" type="abstract"
><argument id="xf05e" multiplicity="oneOrMore" name="node" reference="c_Node" type="in"
/><argument id="x982b" multiplicity="zeroOrMore" name="elementName" reference="c_string" type="out"
><description
>Return a set of element name which can be used for packing nodes.</description></argument></method><method id="du_elementAndAttributeNamesForRequiredInsert" name="elementAndAttributeNamesForRequiredInsert" type="abstract"
><argument id="x3e1c" multiplicity="one" name="parentElement" reference="c_Element" type="in"
/><argument id="x4526" multiplicity="oneOrMore" name="unsatisfiedPattern" reference="c_object" type="in"
><description
>case DTD : an unsatisfiedPattern must be an element name.<br
/>case RNG : an unsatisfiedPattern must be a <reference name="Ref" reference="c_r_Ref"
/> or an <reference name="Attribute" reference="c_r_Attribute"
/>.</description></argument><argument id="x2f5f" multiplicity="zeroOrMore" name="elementName" reference="c_string" type="out"
><description
>Return a set of names of elements and attributes for inserting one as child of parentElement for begining to fit an unsatisfied pattern.</description></argument></method></class></package><package id="p_f_parse" name="parse"
><description
>Classes of this package are interfaces for reporting during or after document parsing.</description><class id="c_documentParsingListener" name="DocumentParsingListener" type="interface"
><description
>This is the interface for being notified for position inside document during parsing.</description><method id="notifyStartDTD" name="notifyStartDTD" type="abstract"
/><method id="notifyEndDTD" name="notifyEndDTD" type="abstract"
/><method id="notifyStartElement" name="notifyStartElement" type="abstract"
><argument id="xb68f" multiplicity="one" name="elementName" reference="c_string" type="in"
/></method><method id="notifyEndElement" name="notifyEndElement" type="abstract"
/></class></package><package id="p_f_docType" name="docType"
><description
>Package for document type information relative classes.</description><class id="c_documentTypeInfo" name="DocumentTypeInfo" type="interface"
><description
>Document type relative information.<br
/>A document type is identified by the document element name and an optional prefix.</description><property id="documentTypeName" multiplicity="one" name="documentTypeName" reference="c_string" type="readonly"
/><property id="documentTypeAdditionalKey" multiplicity="one" name="documentTypeAdditionalKey" reference="c_string" type="readonly"
/><property id="dTDPublicId" multiplicity="zeroOrOne" name="dTDPublicId" reference="c_string" type="standard"
/><property id="hTTPDTDSystemId" multiplicity="zeroOrOne" name="hTTPDTDSystemId" reference="c_string" type="standard"
/><property id="documentRelativeDTDSystemId" multiplicity="zeroOrOne" name="documentRelativeDTDSystemId" reference="c_string" type="standard"
/><property id="userRelativeDTDSystemId" multiplicity="zeroOrOne" name="userRelativeDTDSystemId" reference="c_string" type="standard"
/><property id="dTDXMLSystemId" multiplicity="zeroOrOne" name="dTDXMLSystemId" reference="c_string" type="standard"
/><property id="rNGFullSyntaxSystemId" multiplicity="zeroOrOne" name="rNGFullSyntaxSystemId" reference="c_string" type="standard"
/><property id="rNGSimpleSyntaxSystemId" multiplicity="zeroOrOne" name="rNGSimpleSyntaxSystemId" reference="c_string" type="standard"
/><property id="nameSpaceId" multiplicity="zeroOrOne" name="nameSpaceId" reference="c_string" type="standard"
/><property id="isShortcutUsedForEmptyElement" multiplicity="one" name="isShortcutUsedForEmptyElement" reference="c_boolean" type="standard"
/><property id="defaultConverter" multiplicity="zeroOrOne" name="defaultConverter" reference="c_TransformerInfo" type="standard"
/></class></package><package id="p_f_transform" name="transform"
><description
>Package for transformer information relative classes.</description><class id="c_TransformerInfo" name="TransformerInfo" type="interface"
><description
>Transformer relative information.<br
/>A converter is identified by its name.</description><property id="converterName" multiplicity="one" name="converterName" reference="c_string" type="readonly"
/><property id="dci_documentTypeName" multiplicity="one" name="documentTypeName" reference="c_string" type="standard"
/><property id="dci_transformerClassName" multiplicity="one" name="transformerClassName" reference="c_string" type="standard"
/><property id="dci_paramName" multiplicity="zeroOrMore" name="paramName" reference="c_string" type="standard"
/><property id="dci_isResultXML" multiplicity="one" name="isResultXML" reference="c_boolean" type="standard"
/><property id="cdi_resultDTDPublicId" multiplicity="zeroOrOne" name="resultDTDPublicId" reference="c_string" type="standard"
/><property id="dci_resultDTDSystemId" multiplicity="zeroOrOne" name="resultDTDSystemId" reference="c_string" type="standard"
/><property id="dci_encodingName" multiplicity="zeroOrOne" name="encodingName" reference="c_string" type="standard"
/><property id="dci_isStandalone" multiplicity="one" name="isStandalone" reference="c_boolean" type="standard"
/><property id="dci_isShortcutUsedForEmptyElement" multiplicity="one" name="isShortcutUsedForEmptyElement" reference="c_boolean" type="standard"
/></class></package><package id="p_f_compare" name="compare"
><description
>Classes of this package are interfaces for document comparison</description><class id="c_elementAssociation" name="ElementAssociation" type="interface"
><description
>An element association associates an element of a first document with an element of a second document. The only required condition for two elements to be associated is to have the same local name and namespace URI.</description><property id="ea_namespaceURI" multiplicity="one" name="namespaceURI" reference="c_string" type="readonly"
/><property id="ea_localName" multiplicity="one" name="localName" reference="c_string" type="readonly"
/><property id="ea_element1" multiplicity="one" name="element1" reference="c_Element" type="readonly"
/><property id="ea_element2" multiplicity="one" name="element2" reference="c_Element" type="readonly"
/><property id="ea_areElementsEqual" multiplicity="one" name="areElementsEqual" reference="c_boolean" type="readonly"
/></class><class generalisation="c_elementAssociation" id="c_MutableElementAssociation" name="MutableElementAssociation" type="interface"
><description
>A mutable element association is an element association that belongs to a set of element associations managed through a document association.</description><property id="mea_descendantCount" multiplicity="one" name="descendantCount" reference="c_integer" type="standard"
><description
>Count of descendant element associations, including itself. Equals to 1 if this has no descendant element association.</description></property><method id="mea_getParent" name="getParent" reference="c_elementAssociation" type="abstract"
><description
>The parent association of this association, if any.</description></method></class><class id="c_documentAssociation" name="DocumentAssociation" type="interface"
><description
>This is the interface of the association between two documents. The association is produced by the comparison of the two documents.</description><property id="da_document1" multiplicity="one" name="document1" reference="c_Document" type="readonly"
/><property id="da_document2" multiplicity="one" name="document2" reference="c_Document" type="readonly"
/><property id="da_elementAssociation" multiplicity="zeroOrMore" name="elementAssociation" reference="c_elementAssociation" type="readonly"
/><method id="da_getElementAssociation" name="getElementAssociation" reference="c_elementAssociation" type="abstract"
><argument id="x939e" multiplicity="one" name="element" reference="c_Element" type="in"
/><description
>Returns the association by which &lt;element&gt; is concerned, if any. An element can be concerned at most by one association.</description></method></class><class generalisation="c_documentAssociation" id="c_MutableDocumentAssociation" name="MutableDocumentAssociation" type="interface"
><description
>This is the interface of the association between two documents. The association is produced by the comparison of the two documents.</description><method id="mda_addElementAssociation" name="addElementAssociation" type="abstract"
><argument id="xeb62" multiplicity="one" name="elementAssociation" reference="c_elementAssociation" type="in"
/></method><method id="mda_removeElementAssociation" name="removeElementAssociation" type="abstract"
><argument id="x4dc7" multiplicity="one" name="elementAssociation" reference="c_elementAssociation" type="in"
/></method></class><class id="c_DocumentComparator" name="DocumentComparator" type="interface"
><method id="dc_compare" name="compare" reference="c_documentAssociation" type="abstract"
><argument id="dcc_document1" multiplicity="one" name="document1" reference="c_Document" type="in"
/><argument id="dcc_document2" multiplicity="one" name="document2" reference="c_Document" type="in"
/></method></class></package><class id="c_FullyFledgedDocument" name="FullyFledgedDocument" type="interface"
><description
>Access to a document and all its accessories.</description><property id="ffd_documentSystemId" multiplicity="zeroOrOne" name="documentSystemId" reference="c_string" type="standard"
/><property id="ffd_document" multiplicity="zeroOrOne" name="document" reference="c_Document" type="readonly"
/><property id="ffd_dTD" multiplicity="zeroOrOne" name="dTD" reference="c_dtd" type="readonly"
/><property id="ffd_schema" multiplicity="zeroOrOne" name="schema" reference="c_r_Schema" type="readonly"
/><property id="ffd_elementDefinitionMapper" multiplicity="one" name="elementDefinitionMapper" reference="c_ElementDefinitionMapper" type="readonly"
/><property id="ffd_documentUtil" multiplicity="one" name="documentUtil" reference="c_DocumentUtil" type="readonly"
/><property id="ffd_documentTypeName" multiplicity="zeroOrOne" name="documentTypeName" reference="c_string" type="readonly"
/><property id="ffd_documentTypeAdditionalKey" multiplicity="zeroOrOne" name="documentTypeAdditionalKey" reference="c_string" type="standard"
/><property id="ffd_isReadOnly" init="false" multiplicity="one" name="isReadOnly" reference="c_boolean" type="standard"
/><property id="ffd_isLazy" init="false" multiplicity="one" name="isLazy" reference="c_boolean" type="standard"
><description
>Lazy document editing is not required to conform to DTD or schema.</description></property><property id="ffd_idManager" multiplicity="zeroOrOne" name="idManager" reference="c_IdManager" type="readonly"
/><property id="ffd_nodeManager" multiplicity="zeroOrOne" name="nodeManager" reference="c_NodeManager" type="readonly"
/><property id="ffd_attributeManager" multiplicity="zeroOrOne" name="attributeManager" reference="c_AttributeManager" type="readonly"
/><property id="ffd_fragmentAccess" multiplicity="zeroOrOne" name="fragmentAccess" reference="c_FragmentAccess" type="readonly"
/><property id="ffd_variableNodeList" multiplicity="zeroOrOne" name="variableNodeList" reference="c_VariableNodeList" type="readonly"
/><method id="ffd_reset" name="reset" type="abstract"
><description
>Clears all properties.</description></method><method id="ffd_parse" name="parse" type="abstract"
><description
>Parse the document by loading system id <reference name="documentSystemId" reference="ffd_documentSystemId"
/>.</description></method><method id="ffd_saveDocument" name="saveDocument" type="abstract"
><description
>Saves the modified document using the system id <reference name="documentSystemId" reference="ffd_documentSystemId"
/> if it refers to a file.</description></method></class></package><package id="p_f_view" name="view"
><description
>Classes of this package are interfaces which describe user interface access.</description><class id="c_attributeListener" name="AttributeListener" type="interface"
><description
>Defines an interface for notifying to the view of its element that an attribute value changes.</description><method id="al_setAttribute" name="setAttribute" type="abstract"
><argument id="x937f" multiplicity="one" name="attributeName" reference="c_string" type="in"
/><argument id="xfa6e" multiplicity="one" name="attributeValue" reference="c_string" type="in"
/><description
>Notify that the attribute whose name is <reference name="attributeName" reference="x937f"
/> gets the new value <reference name="attributeValue" reference="xfa6e"
/>.</description></method></class><class id="c_DocumentTreeView" name="DocumentTreeView" type="interface"
><description
>This interface defines the access to the document tree view.</description><method id="dtv_setRootNode" name="setRootNode" type="abstract"
><argument id="xee58" multiplicity="one" name="rootNode" reference="c_Node" type="in"
/><description
>Set <reference name="rootNode" reference="xee58"
/> as the root node of the tree.</description></method><method id="dtv_getSelectedNodes" name="getSelectedNodes" reference="c_NodeList" type="abstract"
><description
>Returns the selected nodes at the same higher level (nearest from the root) at the following conditions :
1 They form a not empty interval.
2 All selected nodes are childs (in deepth) of them.
Else return NULL.</description></method><method id="dtv_setSelectedNode" name="setSelectedNode" type="abstract"
><argument id="x955d" multiplicity="one" name="node" reference="c_Node" type="in"
/><description
>Selects the node <reference name="node" reference="x955d"
/>.</description></method><method id="dtv_setSelectedNodeInterval" name="setSelectedNodeInterval" type="abstract"
><argument id="xaed6" multiplicity="one" name="firstNode" reference="c_Node" type="in"
/><argument id="x7691" multiplicity="one" name="lastNode" reference="c_Node" type="in"
/><description
>Pre-condition : <reference name="firstNode" reference="xaed6"
/> and <reference name="lastNode" reference="x7691"
/> have the same parent node.<br
/>Selects the nodes comprised between and including <reference name="firstNode" reference="xaed6"
/> and <reference name="lastNode" reference="x7691"
/>.</description></method></class><class id="c_NodeDetailView" name="NodeDetailView" type="interface"
><description
>This interface defines the access to the node detail view.</description><method id="ndv_setNode" name="setNode" type="abstract"
><argument id="xc96a" multiplicity="one" name="node" reference="c_Node" type="in"
/><description
>Displays the node <reference name="node" reference="xc96a"
/>.</description></method></class><class id="c_ToolStatusBar" name="ToolStatusBar" type="interface"
><description
>This interface defines the access to the status bar of the tool view.</description></class><class id="c_ToolView" name="ToolView" type="interface"
><description
>This interface defines the access to the tool view.</description><property id="tv_documentTreeView" multiplicity="one" name="documentTreeView" reference="c_DocumentTreeView" type="readonly"
/><property id="tv_nodeDetailView" multiplicity="one" name="nodeDetailView" reference="c_NodeDetailView" type="readonly"
/><property id="tv_toolStatusBar" multiplicity="one" name="toolStatusBar" reference="c_ToolStatusBar" type="readonly"
/><method id="tv_setSelectedNode" name="setSelectedNode" type="standard"
><argument id="x3c1e" multiplicity="one" name="node" reference="c_Node" type="in"
/><description
>Selects the node <reference name="node" reference="x3c1e"
/> within the document tree view and within the node detail view.</description></method><method id="tv_setSelectedNodeInterval" name="setSelectedNodeInterval" type="abstract"
><argument id="xf026" multiplicity="one" name="firstNode" reference="c_Node" type="in"
/><argument id="x9b2d" multiplicity="one" name="lastNode" reference="c_Node" type="in"
/><description
>Pre-condition : <reference name="firstNode" reference="xf026"
/> and <reference name="lastNode" reference="x9b2d"
/> have the same parent node.<br
/>Selects the nodes comprised between and including <reference name="firstNode" reference="xf026"
/> and <reference name="lastNode" reference="x9b2d"
/> within the document tree view. Node detail view is blank.</description></method></class><class id="c_ToolViewAccess" name="ToolViewAccess" type="interface"
><description
>This interface gives access to the tool view. Objects which use it instead of using directly the tool view interface don't need to be aware of tool view rebuilding.</description><property id="tva_toolView" multiplicity="one" name="toolView" reference="c_ToolView" type="readonly"
/></class></package><package id="p_f_operation" name="operation"
><description
>Classes of this package are interfaces about reversible operations</description><class id="c_Operation" name="Operation" type="interface"
><description
>An operation can be created, executed and reversed (or not). Operation execution generally modifies the document.</description><property id="o_isExecuted" multiplicity="one" name="isExecuted" reference="c_boolean" type="readonly"
/><method id="o_execute" name="execute" type="abstract"
><description
>Pre-condition : the operation is not executed.<br
/>Post-condition : the operation is executed.<br
/>The Document is modified as specified.</description></method><method id="o_canHide" name="canHide" reference="c_boolean" type="abstract"
><argument id="o_canHide_operation" multiplicity="one" name="operation" reference="c_Operation" type="in"
/><description
>Return true if this operation could replace the operation argument by hiding its impact on the document.<br
/>The result, by permutting the two operations, must be the same.</description></method><method id="o_createReverseOperation" name="createReverseOperation" reference="c_Operation" type="abstract"
><description
>Pre-condition : the operation is executed.<br
/>Post-condition : the operation is unchanged.<br
/>Return an unexecuted reverse operation.</description></method></class></package><package id="p_f_control" name="control"
><description
>Classes of this package are interfaces which define the control part of the tool.</description><package id="p_f_operators" name="operators"
><description
>This package contains a framework used by operators.</description><class id="c_op_Element" name="Element" type="interface"
><description
>This is like the DOM Element but with severe restrictions. Comments, processing instructions and CDATA sections are ignored or removed. An element can have a child text but no child element. An element can have child elements but no child text.</description><property id="opel_document" multiplicity="one" name="document" reference="c_op_Document" type="readonly"
/><property id="opel_name" multiplicity="one" name="name" reference="c_string" type="readonly"
/><method id="opel_getAttribute" name="getAttribute" reference="c_string" type="abstract"
><argument id="xd44c" multiplicity="one" name="attributeName" reference="c_string" type="in"
/></method><method id="opel_setAttribute" name="setAttribute" type="abstract"
><argument id="x1c0c" multiplicity="one" name="attributeName" reference="c_string" type="in"
/><argument id="x9101" multiplicity="one" name="value" reference="c_string" type="in"
/></method><method id="opel_getParentElement" name="getParentElement" reference="c_op_TreeElement" type="abstract"
/><method id="opel_getPreviousSiblingElement" name="getPreviousSiblingElement" reference="c_op_Element" type="abstract"
/><method id="opel_getNextSiblingElement" name="getNextSiblingElement" reference="c_op_Element" type="abstract"
/><method id="opel_insertNewPreviousSiblingElement" name="insertNewPreviousSiblingElement" type="abstract"
><argument id="x4747" multiplicity="one" name="element" reference="c_op_Element" type="in"
/></method><method id="opel_insertNewNextSiblingElement" name="insertNewNextSiblingElement" type="abstract"
><argument id="x7a40" multiplicity="one" name="element" reference="c_op_Element" type="in"
/></method><method id="opel_remove" name="remove" type="abstract"
/><method id="opel_treeElement" name="treeElement" reference="c_op_TreeElement" type="abstract"
/><method id="opel_leafElement" name="leafElement" reference="c_op_LeafElement" type="abstract"
/></class><class id="c_op_TreeElement" name="TreeElement" type="interface"
><description
>A TreeElement can have child elements but no child text.</description><method id="opte_getFirstChildElement" name="getFirstChildElement" reference="c_op_Element" type="standard"
/><method id="opte_getLastChildElement" name="getLastChildElement" reference="c_op_Element" type="standard"
/><method id="opte_appendNewChildElement" name="appendNewChildElement" type="standard"
><argument id="xe9fe" multiplicity="one" name="element" reference="c_op_Element" type="in"
/></method></class><class id="c_op_LeafElement" name="LeafElement" type="interface"
><description
>A LeafElement can have child text but no child elements.</description><property id="ople_value" multiplicity="one" name="value" reference="c_string" type="standard"
/></class><class id="c_op_Document" name="Document" type="interface"
><description
>This is like the DOM Document but with severe restrictions. Comments, processing instructions, CDATA sections and entity references are ignored.</description><property id="opdo_rootElement" multiplicity="one" name="rootElement" reference="c_op_TreeElement" type="readonly"
/><method id="opdo_createElement" name="createElement" reference="c_op_Element" type="abstract"
/></class><class id="c_Operator" name="Operator" type="interface"
><description
>This the Operator interface for defining document type dependent, complex sequences of operations.</description><method id="operateElement" name="operateElement" type="standard"
><argument id="xa063" multiplicity="one" name="element" reference="c_op_Element" type="in"
/></method></class><class id="c_OperatorInfo" name="OperatorInfo" type="interface"
><description
>This interface defines access to operators information.</description><property id="oi_operatorName" multiplicity="one" name="operatorName" reference="c_string" type="standard"
/><property id="oi_documentTypeName" multiplicity="one" name="documentTypeName" reference="c_string" type="standard"
/><property id="oi_operatorClassName" multiplicity="one" name="operatorClassName" reference="c_string" type="standard"
/></class></package><class id="c_InsertionType" name="InsertionType" type="enumeration"
><instance id="it_PREVIOUS" name="PREVIOUS"
/><instance id="it_NEXT" name="NEXT"
/><instance id="it_CHILD" name="CHILD"
/></class><class id="c_MoveType" name="MoveType" type="enumeration"
><instance id="mt_PREVIOUS" name="PREVIOUS"
/><instance id="mt_NEXT" name="NEXT"
/><instance id="mt_CHILD" name="CHILD"
/><instance id="mt_PARENT" name="PARENT"
/></class><class id="c_EditControl" name="EditControl" type="interface"
><description
>This interface defines the control of the editing capabilities.</description><method id="ec_insertNewNode" name="insertNewNode" type="abstract"
><argument id="x4e77" multiplicity="one" name="relativeNode" reference="c_Node" type="in"
/><argument id="xc4ce" multiplicity="one" name="insertionType" reference="c_InsertionType" type="in"
/><argument id="xb3a8" multiplicity="one" name="nameOfNewElement" reference="c_string" type="in"
/><description
>Creates a node whose type will depends on the type of the node <reference name="relativeNode" reference="x4e77"
/>, the optional name <reference name="nameOfNewElement" reference="xb3a8"
/> and the element specification of its future parent. Inserts this node within the document, relatively to the node <reference name="relativeNode" reference="x4e77"
/>, upon the directive <reference name="insertionType" reference="xc4ce"
/>.</description></method><method id="ec_deleteNodeInterval" name="deleteNodeInterval" type="abstract"
><argument id="x21f6" multiplicity="one" name="nodes" reference="c_NodeList" type="in"
/><description
>Removes the nodes <reference name="nodes" reference="x21f6"
/> from the document.</description></method><method id="ec_moveNodeInterval" name="moveNodeInterval" type="abstract"
><argument id="x5af2" multiplicity="one" name="moveType" reference="c_MoveType" type="in"
/><argument id="x0227" multiplicity="one" name="nodes" reference="c_NodeList" type="in"
/><description
>Moves the nodes <reference name="nodes" reference="x0227"
/> within the document, upon the directive <reference name="moveType" reference="x5af2"
/>.</description></method><method id="ec_reorderNodeInterval" name="reorderNodeInterval" type="abstract"
><argument id="x292e" multiplicity="one" name="isReverseOrder" reference="c_boolean" type="in"
/><argument id="xa5fc" multiplicity="one" name="nodes" reference="c_NodeList" type="in"
/><description
>Reorders the node interval <reference name="nodes" reference="xa5fc"
/> within the document, upon the directive <reference name="isReverseOrder" reference="x292e"
/>.</description></method><method id="ec_packNodeInterval" name="packNodeInterval" type="abstract"
><argument id="x1e24" multiplicity="one" name="nodes" reference="c_NodeList" type="in"
/><argument id="x4bac" multiplicity="one" name="elementName" reference="c_string" type="in"
/><description
>Packs the nodes <reference name="nodes" reference="x1e24"
/> within one element named <reference name="elementName" reference="x4bac"
/>.</description></method><method id="ec_unpackElement" name="unpackElement" type="standard"
><argument id="xc832" multiplicity="one" name="element" reference="c_Element" type="in"
/><description
>Unpacks the element <reference name="element" reference="xc832"
/>.</description></method><method id="ec_cutNodeInterval" name="cutNodeInterval" type="abstract"
><argument id="x66aa" multiplicity="one" name="nodes" reference="c_NodeList" type="in"
/><description
>Copies the node interval <reference name="nodes" reference="x66aa"
/> within the fragment and removes them from the document.</description></method><method id="ec_copyNodeInterval" name="copyNodeInterval" type="abstract"
><argument id="x1616" multiplicity="one" name="nodes" reference="c_NodeList" type="in"
/><description
>Copies the node interval <reference name="nodes" reference="x1616"
/> within the fragment.</description></method><method id="ec_pasteDocumentFragment" name="pasteDocumentFragment" type="abstract"
><argument id="x1e44" multiplicity="one" name="relativeNode" reference="c_Node" type="in"
/><argument id="x0af8" multiplicity="one" name="insertionType" reference="c_InsertionType" type="in"
/><description
>Paste the fragment within the document relatively to the node <reference name="relativeNode" reference="x1e44"
/>.</description></method><method id="ec_clearDocumentFragment" name="clearDocumentFragment" type="abstract"
><description
>Clears the fragment.</description></method><method id="ec_setNodeValue" name="setNodeValue" type="abstract"
><argument id="x9b00" multiplicity="one" name="node" reference="c_Node" type="in"
/><argument id="xbb13" multiplicity="one" name="newValue" reference="c_string" type="in"
/><description
>Gives the value <reference name="newValue" reference="xbb13"
/> to the node <reference name="node" reference="x9b00"
/>.</description></method><method id="ec_setAttributeValue" name="setAttributeValue" type="abstract"
><argument id="xb12a" multiplicity="one" name="element" reference="c_Element" type="in"
/><argument id="x1823" multiplicity="one" name="attributeName" reference="c_string" type="in"
/><argument id="x50af" multiplicity="zeroOrOne" name="newValue" reference="c_string" type="in"
><description
>If the newValue if not provided then the attribute node is removed.</description></argument><description
>Set the value of an attribute or remove it.</description></method><method id="ec_replaceNode" name="replaceNode" type="abstract"
><argument id="xb9f9" multiplicity="one" name="node" reference="c_Node" type="in"
/><argument id="xccc3" multiplicity="one" name="nodeType" reference="c_NodeType" type="in"
/><argument id="x57e5" multiplicity="zeroOrOne" name="nodeName" reference="c_string" type="in"
/><description
>Replaces within the document the node <reference name="node" reference="xb9f9"
/> by a node whose type is <reference name="nodeType" reference="xccc3"
/> and, if necessary, name is <reference name="nodeName" reference="x57e5"
/>.<br
/>Keep childs in case of element to element replacement.</description></method><method id="ec_joinText" name="joinText" type="abstract"
><argument id="xb435" multiplicity="one" name="textNode" reference="c_TextNode" type="in"
/><description
>Joins the text node <reference name="textNode" reference="xb435"
/> with its next sibling, text node like it.</description></method><method id="ec_splitText" name="splitText" type="abstract"
><argument id="x466e" multiplicity="one" name="textNode" reference="c_TextNode" type="in"
/><argument id="xe202" multiplicity="one" name="offset" reference="c_integer" type="in"
/><description
>Splits the text node <reference name="textNode" reference="x466e"
/> at offset <reference name="offset" reference="xe202"
/>.</description></method><method id="ec_addChildsIfNecessary" name="addChildsIfNecessary" type="abstract"
><argument id="x0c07" multiplicity="one" name="element" reference="c_Element" type="in"
/><description
>Add children to element in order to make it valid accordingly to the current schema.</description></method><method id="ec_undo" name="undo" type="abstract"
><description
>Undoes the last operation ready for undoing.</description></method><method id="ec_redo" name="redo" type="abstract"
><description
>Redoes the last operation ready for redoing.</description></method></class><class id="c_FileControl" name="FileControl" type="interface"
><description
>This interface defines the control of the load/save capabilities.</description><method id="fc_load" name="load" type="abstract"
><argument id="x63eb" multiplicity="one" name="systemId" reference="c_string" type="in"
/></method><method id="fc_save" name="save" type="abstract"
/></class><class id="c_InstanceIdentifier" name="InstanceIdentifier" type="elementary"
><description
>Identifies an instance of the tool.</description></class><class id="c_ToolControl" name="ToolControl" type="interface"
><description
>This interface defines the control of one instance of the tool.</description><property id="tc_instanceIdentifier" multiplicity="oneOrMore" name="instanceIdentifier" reference="c_InstanceIdentifier" type="readonly"
/><method id="tc_deleteInstance" name="deleteInstance" type="abstract"
><description
>Delete itself.</description></method><method id="tc_importFragment" name="importFragment" type="abstract"
><argument id="xbecc" multiplicity="one" name="instanceIdentifier" reference="c_InstanceIdentifier" type="in"
/><description
>Imports the fragment attached to the instance of the tool identified by <reference name="instanceIdentifier" reference="xbecc"
/>.</description></method><method id="tc_compareDocument" name="compareDocument" type="abstract"
><argument id="xfef5" multiplicity="one" name="instanceIdentifier" reference="c_InstanceIdentifier" type="in"
/><description
>Compares the document attached to the instance of the tool identified by <reference name="instanceIdentifier" reference="xfef5"
/>.</description></method><method id="tc_mergeDocuments" name="mergeDocuments" type="abstract"
><argument id="x0965" multiplicity="one" name="instanceIdentifier" reference="c_InstanceIdentifier" type="in"
/><description
>Merges the document attached to the instance of the tool identified by <reference name="instanceIdentifier" reference="x0965"
/>.</description></method><method id="tc_deleteCurrentDocumentAssociation" name="deleteCurrentDocumentAssociation" type="standard"
/></class><class id="c_GlobalControl" name="GlobalControl" type="standard"
><description
>This interface defines the control of all instances of the tool.</description><property id="gc_instanceCount" multiplicity="one" name="instanceCount" reference="c_integer" type="readonly"
/><method id="gc_createInstance" name="createInstance" reference="c_InstanceIdentifier" type="abstract"
><description
>Creates a new instance and returns its identifier.</description></method></class></package></package><package id="p_util" name="util"
><description
>Classes of this package are utilities which don't depend on the tool framework.</description><package id="p_u_exception" name="exception"
><description
>Classes of this package are concerned by exception handling.</description></package><package id="p_u_dom" name="dom"
><description
>This package contains DOM utility classes.</description><class id="c_u_NodeInterval" name="NodeInterval" type="final"
><description
>Retains the first and the last node of a child nodes interval.</description><property id="ni_fisrtNode" multiplicity="one" name="fisrtNode" reference="c_Node" type="standard"
/><property id="ni_lastNode" multiplicity="one" name="lastNode" reference="c_Node" type="standard"
/><method id="ni_size" name="size" reference="c_integer" type="standard"
/><method id="ni_move" name="move" type="standard"
><argument id="x748a" multiplicity="one" name="destinationParentNode" reference="c_Node" type="in"
/><argument id="x98a0" multiplicity="one" name="destinationNextSibling" reference="c_Node" type="in"
/></method><method id="ni_nodeList" name="nodeList" reference="c_NodeList" type="standard"
/></class></package><package id="p_u_io" name="io"
><description
>Classes of this package are concerned by input - output processing.</description></package><package id="p_u_view" name="view"
><description
>Classes of this package are concerned by basic user interface.</description></package></package><package id="p_option" name="option"
><description
>Classes of this package are concerned by options management.</description></package><package id="p_document" name="document"
><description
>This package contains the implementation of the document and its accesssories.</description><package id="p_id" name="id"
><description
>This package contains the <reference name="IdManager" reference="c_IdManager"
/> implementation.</description></package><package id="p_dtd" name="dtd"
><description
>This package contains DTD relative implementations.</description><package id="p_dtd_impl" name="impl"
><description
>This package contains DTD implementation.</description></package><package id="p_dtd_parse" name="parse"
><description
>This package contains classes for building a DTD from parsing events.</description></package><class id="c_ElementNamePath" name="ElementNamePath" type="final"
><description
>Element name path through the content model tree, from the root node to the element name leaf node.</description><property id="enp_childIndex" multiplicity="zeroOrMore" name="childIndex" reference="c_integer" type="readonly"
/></class><class generalisation="c_f_ElementContent" id="c_dtd_ElementContentImpl" name="ElementContentImpl" type="final"
><description
>Represents the children content of an element from the point of view of the DTD.</description><property id="cci_rootSpecNode" multiplicity="one" name="rootSpecNode" reference="c_specificationNode" type="readonly"
/><property generalisation="cc_elementSpec" id="cci_elementName" multiplicity="zeroOrMore" name="elementName" reference="c_string" type="readonly"
/><property id="xaa0d" multiplicity="zeroOrMore" name="elementNamePaths" reference="c_ElementNamePath" type="readonly"
/></class><class generalisation="c_f_AttributesContent" id="c_dtd_AttributesContentImpl" name="AttributesContentImpl" type="final"
><description
>Represents the attributes content of an element from the point of view of the DTD.</description></class></package><package id="p_relaxng" name="relaxng"
><description
>This package contains RELAX NG relative implementations.</description><package id="p_rng_impl" name="impl"
><description
>This package contains an implementation of RELAX NG.</description></package><package id="p_rng_parse" name="parse"
><description
>This package contains classes for building a RELAX NG schema from parsing events.</description></package><class id="c_PatternPath" name="PatternPath" type="final"
><description
>Pattern path through the content model tree, from the root pattern to the leaf pattern.</description><property id="pp_childIndex" multiplicity="zeroOrMore" name="childIndex" reference="c_integer" type="readonly"
/></class><class generalisation="c_f_ElementContent" id="c_rng_ElementContentImpl" name="ElementContentImpl" type="final"
><description
>Represents the children content of an element from the point of view of the RELAX NG schema.</description><property id="x0da5" multiplicity="one" name="rootPattern" reference="c_r_NonEmptyPattern" type="readonly"
/><property generalisation="cc_elementSpec" id="cci_elementSpec" multiplicity="zeroOrMore" name="elementSpec" reference="c_object" type="readonly"
><description
>An interleave set of QualifiedName and ElementDefinition.</description></property><property id="cci_patternPaths" multiplicity="zeroOrMore" name="patternPaths" reference="c_PatternPath" type="readonly"
/></class><class generalisation="c_f_AttributesContent" id="c_rng_AttributesContentImpl" name="AttributesContentImpl" type="final"
><description
>Represents the attributes content of an element from the point of view of the RELAX NG schema.</description></class></package><package id="pd_util" name="util"
><description
>Implementation of document utility classes.</description></package><package id="p_parse" name="parse"
><description
>This package contains the DOM parser implementation.</description></package><package id="p_manage" name="manage"
><class generalisation="c_ElementDefinitionMapper" id="c_DTDElementManager" name="DTDElementManager" type="final"
/><class generalisation="c_DocumentUtil" id="c_DTDDocumentUtil" name="DTDDocumentUtil" type="final"
/><class generalisation="c_ElementDefinitionMapper" id="c_RNGElementManager" name="RNGElementManager" type="final"
/><class generalisation="c_DocumentUtil" id="c_RNGDocumentUtil" name="RNGDocumentUtil" type="final"
/></package></package><package id="p_view" name="view"
><description
>This package contains user interface implementation classes.</description><package id="p_v_model" name="model"
><description
>This package contains the model part for the tree view.</description></package><package id="p_v_resource" name="resource"
><description
>This package contains locale resources.</description></package><package id="p_v_node" name="node"
><description
>This package contains the node detail view implementation.</description><package id="p_v_attribute" name="attribute"
><description
>This package contains the element attribute table view implementation.</description></package><class generalisation="c_NodeDetailView" id="c_NodeDetailPanel" name="NodeDetailPanel" type="final"
><description
>This is the node detail view implementation.</description><method id="nd_setNode" name="setNode" type="final"
><argument id="nds_node" multiplicity="one" name="node" reference="c_Node" type="in"
/><description
>Displays the node <reference name="node" reference="nds_node"
/>.</description></method></class></package><package id="p_v_stat" name="stat"
><description
>This package contains the statistic view implementation.</description><class id="c_ElementStatistic" name="ElementStatistic" type="interface"
><property id="es_elementName" multiplicity="one" name="elementName" reference="c_string" type="readonly"
/><property id="es_elementCount" init="zero" multiplicity="one" name="elementCount" reference="c_integer" type="readonly"
/><method id="es_incrementCount" name="incrementCount" type="abstract"
/></class></package><package id="p_v_shortcut" name="shortcut"
><description
>This package contains the menu keyboard shortcuts.</description></package><package id="p_v_frame" name="frame"
><description
>This package contains the accessory frames.</description><class generalisation="c_observer" id="c_DocumentFragmentFrame" name="DocumentFragmentFrame" type="final"
><method generalisation="o_update" id="dff_update" name="update" type="final"
><argument id="dff_update_observable" multiplicity="one" name="observable" reference="c_object" type="in"
/><description
>Updates itself relatively to the fragment <reference name="observable" reference="dff_update_observable"
/>.</description></method></class><class generalisation="c_observer" id="c_DocumentTypeInfoFrame" name="DocumentTypeInfoFrame" type="final"
><method generalisation="o_update" id="dtif_update" name="update" type="final"
><argument id="dtif_update_observable" multiplicity="one" name="observable" reference="c_object" type="in"
/><description
>Updates itself relatively to the document type info list <reference name="observable" reference="dtif_update_observable"
/>.</description></method></class><class generalisation="c_observer" id="c_NodeListFrame" name="NodeListFrame" type="final"
><method generalisation="o_update" id="nlf_update" name="update" type="final"
><argument id="nlf_update_observable" multiplicity="one" name="observable" reference="c_object" type="in"
/><description
>Updates itself relatively to the node list <reference name="observable" reference="nlf_update_observable"
/>.</description></method></class><class generalisation="c_observer" id="c_ReferencersFrame" name="ReferencersFrame" type="final"
><method generalisation="o_update" id="rf_update" name="update" type="final"
><argument id="rf_update_observable" multiplicity="one" name="observable" reference="c_object" type="in"
/><description
>Displays the list of elements which refers to the target <reference name="observable" reference="rf_update_observable"
/>.</description></method></class></package><package id="p_v_main" name="main"
><description
>This package contains the main frame.</description><package id="p_v_menu" name="menu"
><description
>Main menus.</description></package><class generalisation="c_ToolView" id="c_ToolFrame" name="ToolFrame" type="final"
><description
>Implements the tool view.</description></class></package></package><package id="p_operation" name="operation"
><description
>This package contains all that concern operations.</description><package id="p_op_core" name="core"
><description
>This package contains the core operation implementation.</description><class generalisation="c_Operation" id="xede6" name="NullOperation" type="standard"
><description
>Operation with no effect.</description><method generalisation="o_execute" id="xff17" name="execute" type="final"
><description
>Do nothing.</description></method><method generalisation="o_createReverseOperation" id="xe305" name="createReverseOperation" reference="xede6" type="standard"
/></class><class generalisation="c_Operation" id="x8318" name="TransitionOperation" type="final"
><description
>Such an operation, when inserted between two operations, means that these two operations must be executed together in order to maintain the document valid.</description><method generalisation="xe305" id="x7737" name="createReverseOperation" reference="x8318" type="final"
/></class><class generalisation="c_Operation" id="x0f9d" name="NodesInsertOperation" type="final"
><description
>Operation for inserting nodes within the document.</description><property id="x38c6" multiplicity="one" name="operationListener" reference="c_NodeManager" type="readonly"
/><property id="x9587" multiplicity="one" name="toolViewAccess" reference="c_ToolViewAccess" type="readonly"
/><property id="x397c" multiplicity="one" name="parentNode" reference="c_Node" type="readonly"
/><property id="xaebd" multiplicity="zeroOrOne" name="nextSibling" reference="c_Node" type="readonly"
/><property id="x295e" multiplicity="oneOrMore" name="newNode" reference="c_Node" type="readonly"
/><method generalisation="o_execute" id="x1b98" name="execute" type="final"
><description
>Pre-condition : <reference name="newNodes" reference="x295e"
/> are not within the document.<br
/>Post-condition : <reference name="newNodes" reference="x295e"
/> are within the document.<br
/>Inserts the nodes <reference name="newNodes" reference="x295e"
/> before the node <reference name="nextSibling" reference="xaebd"
/> if specified, else as last childs of node <reference name="parentNode" reference="x397c"
/>. Selects the new nodes within the tool view.</description></method><method generalisation="o_createReverseOperation" id="x1751" name="createReverseOperation" reference="x66cd" type="final"
/></class><class generalisation="c_Operation" id="x66cd" name="NodesRemoveOperation" type="final"
><description
>Operation for removing nodes from the document.</description><property id="xd6ec" multiplicity="one" name="operationListener" reference="c_NodeManager" type="readonly"
/><property id="x8eec" multiplicity="one" name="toolViewAccess" reference="c_ToolViewAccess" type="readonly"
/><property id="x15e9" multiplicity="oneOrMore" name="nodeToRemove" reference="c_Node" type="readonly"
/><property id="xa5c2" multiplicity="zeroOrOne" name="parentNode" reference="c_Node" type="readonly"
/><property id="x670c" multiplicity="zeroOrOne" name="nextSibling" reference="c_Node" type="readonly"
/><method generalisation="o_execute" id="x48e6" name="execute" type="final"
><description
>Pre-condition : <reference name="nodesToRemove" reference="x15e9"
/> are within the document.<br
/>Post-condition : <reference name="nodesToRemove" reference="x15e9"
/> are not within the document.<br
/>Removes the nodes <reference name="nodesToRemove" reference="x15e9"
/> from the document. Stores the parent node and the next sibling (if existing) for the reverse operation. Selects within the tool view either the next node if existing, either the previous node if existing, else the parent node.</description></method><method generalisation="o_createReverseOperation" id="xda47" name="createReverseOperation" reference="x0f9d" type="final"
/></class><class generalisation="c_Operation" id="x1328" name="NodeIntervalPackOperation" type="final"
><description
>Operation for packing nodes.<br
/>Comment : Regarding the DOM interface, this operation is not atomic.</description><property id="x322e" multiplicity="one" name="operationListener" reference="c_NodeManager" type="readonly"
/><property id="x01e6" multiplicity="one" name="toolViewAccess" reference="c_ToolViewAccess" type="readonly"
/><property id="x3e3d" multiplicity="one" name="firstSourceNode" reference="c_Node" type="readonly"
/><property id="x04bb" multiplicity="one" name="lastSourceNode" reference="c_Node" type="readonly"
/><property id="x91f1" multiplicity="one" name="newElement" reference="c_Element" type="readonly"
/><method generalisation="o_execute" id="xec87" name="execute" type="final"
><description
>Pre-condition : <reference name="firstSourceNode" reference="x3e3d"
/> and <reference name="lastSourceNode" reference="x04bb"
/> have the same parent node.<br
/>Pre-condition : <reference name="newElement" reference="x91f1"
/> has no child.<br
/>Replaces the nodes comprised between and including <reference name="firstSourceNode" reference="x3e3d"
/> and <reference name="lastSourceNode" reference="x04bb"
/> by the element <reference name="newElement" reference="x91f1"
/> with the previous nodes as childs. Selects the element <reference name="newElement" reference="x91f1"
/>.</description></method><method generalisation="o_createReverseOperation" id="x9d36" name="createReverseOperation" reference="x3dba" type="final"
/></class><class generalisation="c_Operation" id="x3dba" name="ElementUnpackOperation" type="final"
><description
>Operation for unpacking an element within the document.<br
/>Comment : Regarding the DOM interface, this operation is not atomic.</description><property id="x8a80" multiplicity="one" name="operationListener" reference="c_NodeManager" type="readonly"
/><property id="x3ce6" multiplicity="one" name="toolViewAccess" reference="c_ToolViewAccess" type="readonly"
/><property id="x3511" multiplicity="one" name="element" reference="c_Element" type="readonly"
/><property id="x009e" multiplicity="one" name="firstSourceNode" reference="c_Node" type="readonly"
/><property id="x8bcf" multiplicity="one" name="lastSourceNode" reference="c_Node" type="readonly"
/><method generalisation="o_execute" id="xfb5a" name="execute" type="final"
><description
>Replaces the element <reference name="element" reference="x3511"
/> by its childs. Stores the first child and the last child for a reverse operation. Selects the childs.</description></method><method generalisation="o_createReverseOperation" id="x3d1d" name="createReverseOperation" reference="x1328" type="final"
/></class><class generalisation="c_Operation" id="xb63a" name="NodesReplaceOperation" type="final"
><description
>Operation for replacing a sequence of nodes.</description><property id="xdd64" multiplicity="one" name="operationListener" reference="c_NodeManager" type="readonly"
/><property id="x13f6" multiplicity="one" name="toolViewAccess" reference="c_ToolViewAccess" type="readonly"
/><property id="xc48a" multiplicity="oneOrMore" name="oldNode" reference="c_Node" type="readonly"
/><property id="x4a95" multiplicity="oneOrMore" name="newNode" reference="c_Node" type="readonly"
/><method generalisation="o_execute" id="x9383" name="execute" type="final"
><description
>Pre-condition : <reference name="oldNodes" reference="xc48a"
/> are within the document,<reference name="newNodes" reference="x4a95"
/> are not.<br
/>Replaces the node(s) <reference name="oldNode" reference="xc48a"
/> by the node(s) <reference name="newNode" reference="x4a95"
/>. Selects the node(s) <reference name="newNodes" reference="x4a95"
/> within the tool view.</description></method><method generalisation="o_createReverseOperation" id="x5ec7" name="createReverseOperation" reference="xb63a" type="final"
/></class><class generalisation="c_Operation" id="xbd3d" name="ElementNameReplaceOperation" type="final"
><description
>Operation for replacing the name of an element.<br
/>Comment : Regarding the DOM interface, this operation is not atomic.</description><property id="xeb4f" multiplicity="one" name="operationListener" reference="c_NodeManager" type="readonly"
/><property id="x7e8a" multiplicity="one" name="toolViewAccess" reference="c_ToolViewAccess" type="readonly"
/><property id="xe3b9" multiplicity="one" name="oldElement" reference="c_Element" type="readonly"
/><property id="x1d68" multiplicity="one" name="newElement" reference="c_Element" type="readonly"
/><method generalisation="o_execute" id="x5679" name="execute" type="final"
><description
>Pre-condition : <reference name="oldElement" reference="xe3b9"
/> is within the document, <reference name="newElement" reference="x1d68"
/> is not.<br
/>Pre-condition : <reference name="newElement" reference="x1d68"
/> has no child node.<br
/>Replaces the element <reference name="oldElement" reference="xe3b9"
/> by the element <reference name="newElement" reference="x1d68"
/>. Moves the child nodes of <reference name="oldElement" reference="xe3b9"
/> as child nodes of <reference name="newElement" reference="x1d68"
/>. Selects the element <reference name="newElement" reference="x1d68"
/> within the tool view.</description></method><method generalisation="o_createReverseOperation" id="xb048" name="createReverseOperation" reference="xbd3d" type="final"
/></class><class generalisation="c_Operation" id="xe2af" name="NodeSetValueOperation" type="final"
><description
>Operation for setting the value of a valuable node (text node, comment node, processing instruction node or cdata section node).</description><property id="x6162" multiplicity="one" name="operationListener" reference="c_NodeManager" type="readonly"
/><property id="xd0d9" multiplicity="one" name="toolViewAccess" reference="c_ToolViewAccess" type="readonly"
/><property id="x4182" multiplicity="one" name="node" reference="c_Node" type="readonly"
/><property id="xeb46" multiplicity="one" name="oldValue" reference="c_string" type="readonly"
/><property id="x34ea" multiplicity="one" name="newValue" reference="c_string" type="readonly"
/><method generalisation="o_execute" id="x6f2f" name="execute" type="final"
><description
>Pre-condition : <reference name="node" reference="x4182"
/> is within the document.<br
/>Stores within <reference name="oldvalue" reference="xeb46"
/> the value of the node <reference name="node" reference="x4182"
/> for a reverse operation. Set the value of the node to <reference name="newValue" reference="x34ea"
/>. Selects the node within the tool view.</description></method><method generalisation="o_createReverseOperation" id="xc740" name="createReverseOperation" reference="xe2af" type="final"
/></class><class generalisation="c_Operation" id="x857e" name="AttrSetValueOperation" type="final"
><description
>Operation for setting the value of an element attribute.</description><property id="x3c01" multiplicity="one" name="attributeManager" reference="c_AttributeManager" type="readonly"
/><property id="x4a1c" multiplicity="one" name="toolViewAccess" reference="c_ToolViewAccess" type="readonly"
/><property id="x669f" multiplicity="one" name="element" reference="c_Element" type="readonly"
/><property id="x924d" multiplicity="one" name="attributeName" reference="c_string" type="readonly"
/><property id="xa46d" multiplicity="one" name="oldValue" reference="c_string" type="readonly"
/><property id="x8bd3" multiplicity="one" name="newValue" reference="c_string" type="readonly"
/><method generalisation="o_execute" id="x03ea" name="execute" type="final"
><description
>Pre-condition : <reference name="element" reference="x669f"
/> is within the document.<br
/>Pre-condition : <reference name="element" reference="x669f"
/> has an attribute named <reference name="attributeName" reference="x924d"
/>.<br
/>Stores in <reference name="oldValue" reference="xa46d"
/> the value of the attribute named <reference name="attributeName" reference="x924d"
/> of the element <reference name="element" reference="x669f"
/> for a reverse operation. Set the value of the attribute to <reference name="newValue" reference="x8bd3"
/>. Selects the element within the tool view.</description></method><method generalisation="o_createReverseOperation" id="x1ff7" name="createReverseOperation" reference="x857e" type="final"
/></class><class generalisation="c_Operation" id="x3c3e" name="NodeIntervalMoveOperation" type="final"
><description
>Operation for moving nodes of an interval.</description><property id="x1e11" multiplicity="one" name="operationListener" reference="c_NodeManager" type="readonly"
/><property id="x60a9" multiplicity="one" name="toolViewAccess" reference="c_ToolViewAccess" type="readonly"
/><property id="x1958" multiplicity="one" name="firstSourceNode" reference="c_Node" type="readonly"
/><property id="x535f" multiplicity="one" name="lastSourceNode" reference="c_Node" type="readonly"
/><property id="x38dd" multiplicity="one" name="destinationParentNode" reference="c_Node" type="readonly"
/><property id="x5e46" multiplicity="one" name="destinationNextSibling" reference="c_Node" type="readonly"
/><property id="xfa51" multiplicity="one" name="sourceParentNode" reference="c_Node" type="standard"
/><property id="x3fe9" multiplicity="one" name="sourceNextSibling" reference="c_Node" type="standard"
/><method generalisation="o_execute" id="xec32" name="execute" type="final"
><description
>Pre-condition : <reference name="firstSourceNode" reference="x1958"
/> and <reference name="lastSourceNode" reference="x535f"
/> have the same parent node.<br
/>Pre-condition : <reference name="destinationParentNode" reference="x38dd"
/> is within the document.<br
/>Stores within <reference name="sourceParentNode" reference="xfa51"
/> the parent node of the node <reference name="firstSourceNode" reference="x1958"
/> (parent node of <reference name="lastSourceNode" reference="x535f"
/> is the same). Stores within <reference name="sourceNextSibling" reference="x3fe9"
/> the next sibling of the node <reference name="lastSourceNode" reference="x535f"
/>. Storing <reference name="sourceParentNode" reference="xfa51"
/> and <reference name="sourceNextSibling" reference="x3fe9"
/> is required for later creating a reverse operation. Moves the nodes comprised between and including <reference name="firstSourceNode" reference="x1958"
/> and <reference name="lastSourceNode" reference="x535f"
/> before the node <reference name="destinationNextSibling" reference="x5e46"
/> if specified, else as last childs of node <reference name="destinationParentNode" reference="x38dd"
/>. Selects the moved nodes within the tool view.</description></method><method generalisation="o_createReverseOperation" id="x8d17" name="createReverseOperation" reference="x3c3e" type="final"
/></class><class generalisation="c_Operation" id="x1b3a" name="NodeIntervalReorderOperation" type="final"
><description
>Operation for reorder nodes of an interval.</description><property id="x71df" multiplicity="one" name="operationListener" reference="c_NodeManager" type="readonly"
/><property id="x95c9" multiplicity="one" name="toolViewAccess" reference="c_ToolViewAccess" type="readonly"
/><property id="x453f" multiplicity="oneOrMore" name="nodesInDestinationOrder" reference="c_Node" type="readonly"
/><property id="xd33e" multiplicity="oneOrMore" name="nodesInSourceOrder" reference="c_Node" type="standard"
/><method generalisation="o_execute" id="x7204" name="execute" type="final"
><description
>Pre-condition : <reference name="nodesInDestinationOrder" reference="x453f"
/> constitutes an interval.<br
/>Stores the nodes of the interval in their natural order within <reference name="nodesInSourceOrder" reference="xd33e"
/>. Storing the actual order order of nodes is required for later creating a reverse operation. Then reorders the nodes. Finally, selects the reordered nodes within the tool view.</description></method><method generalisation="o_createReverseOperation" id="xc4a1" name="createReverseOperation" reference="x1b3a" type="final"
/></class><class generalisation="c_Operation" id="xed63" name="NextTextJoinOperation" type="final"
><description
>Operation for joining text nodes.</description><property id="x03fe" multiplicity="one" name="operationListener" reference="c_NodeManager" type="readonly"
/><property id="xfeac" multiplicity="one" name="toolViewAccess" reference="c_ToolViewAccess" type="readonly"
/><property id="xe5cb" multiplicity="one" name="textToJoinToNextOne" reference="c_TextNode" type="readonly"
/><property id="x8736" multiplicity="one" name="offset" reference="c_integer" type="readonly"
/><method generalisation="o_execute" id="x7d1a" name="execute" type="final"
><description
>Pre-condition : <reference name="textToJoinToNextOne" reference="xe5cb"
/> is within the document.<br
/>Pre-condition : <reference name="textToJoinToNextOne" reference="xe5cb"
/> has a next sibling text node.<br
/>Stores within <reference name="offset" reference="x8736"
/> the length of the value of the text node <reference name="textToJoinToNextOne" reference="xe5cb"
/> for being able later to build a reverse operation. Joins the text node <reference name="textToJoinToNextOne" reference="xe5cb"
/> to the next one. Selects the resulting text node within the tool view.</description></method><method generalisation="o_createReverseOperation" id="x9c42" name="createReverseOperation" reference="x10fa" type="final"
/></class><class generalisation="c_Operation" id="x10fa" name="TextSplitOperation" type="final"
><description
>Operation for spliting a text node.</description><property id="x35a5" multiplicity="one" name="operationListener" reference="c_NodeManager" type="readonly"
/><property id="xe4fa" multiplicity="one" name="toolViewAccess" reference="c_ToolViewAccess" type="readonly"
/><property id="x9d57" multiplicity="one" name="textToSplit" reference="c_TextNode" type="readonly"
/><property id="x4eef" multiplicity="one" name="offset" reference="c_integer" type="readonly"
/><method generalisation="o_execute" id="xbeb8" name="execute" type="final"
><description
>Pre-condition : <reference name="textToSplit" reference="x9d57"
/> is within the document.<br
/>Pre-condition : <reference name="offset" reference="x4eef"
/> refers to an offset inside the value of the text node.<br
/>Splits the text node <reference name="textToSplit" reference="x9d57"
/> at offset <reference name="offset" reference="x4eef"
/>. Selects the first resulting text node within the tool view.</description></method><method generalisation="o_createReverseOperation" id="xafc0" name="createReverseOperation" reference="xed63" type="final"
/></class></package><class id="c_OperationStack" name="OperationStack" type="interface"
><description
>Operation stack for undo / redo.</description><property id="os_undoableOperation" multiplicity="zeroOrMore" name="undoableOperation" reference="c_Operation" type="readonly"
/><property id="os_redoableOperation" multiplicity="zeroOrMore" name="redoableOperation" reference="c_Operation" type="readonly"
/><method id="os_executeAndAdd" name="executeAndAdd" type="abstract"
><argument id="ose_operation" multiplicity="one" name="operation" reference="c_Operation" type="in"
/><description
>Pre-condition : the operation <reference name="operation" reference="ose_operation"
/> is not executed.<br
/>Executes the operation <reference name="operation" reference="ose_operation"
/> and adds it to the undoable operations. Redoable operations, if exists, are deleted.</description></method><method id="os_undo" name="undo" type="abstract"
><description
>Pre-condition: There is (at least) one undoable operation.<br
/>Removes the more recent operation from the undoable ones. Reverse this operation, executes it and adds it to the redoable operations.<br
/>Repeats if a transition between two unseparable operations is encountered.</description></method><method id="os_redo" name="redo" type="abstract"
><description
>Pre-condition: There is (at least) one redoable operation.<br
/>Removes the more recent operation from the redoable ones. Reverse this operation, executes it and adds it to the undoable operations.<br
/>Repeats if a transition between two unseparable operations is encountered.</description></method><method id="os_clearUndoOperations" name="clearUndoOperations" type="abstract"
/><method id="os_clearRedoOperations" name="clearRedoOperations" type="abstract"
/></class><class generalisation="c_observer" id="c_OperationStackFrame" name="OperationStackFrame" type="final"
><method generalisation="o_update" id="osf_update" name="update" type="final"
><argument id="osf_update_observable" multiplicity="one" name="observable" reference="c_object" type="in"
/><description
>Updates itself relatively to the operation stack <reference name="observable" reference="osf_update_observable"
/>.</description></method></class></package><package id="p_compare" name="compare"
><description
>This package contains the logic for document comparison.</description><package id="p_comp_util" name="util"
><description
>This package contains utilities used by document comparison.</description></package><package id="p_comp_impl" name="impl"
><description
>This package contains the logic of the comparison algorithm "from leaves".</description><class generalisation="c_DocumentComparator" id="c_DocumentComparatorImpl" name="DocumentComparatorImpl" type="standard"
><description
>Search for leaf element associations, then associate parent elements until root. Associated leaf elements must have the same "value" and be unique within a sub-tree view of their document. The 'value" of an element is defined as a concatenation of its attributes (name and value) and the values of its child text nodes if any. The process is repeated throw each sub-trees defined by each new element association.</description></class></package></package><package id="p_transform" name="transform"
><description
>This package contains a few document transformers.</description><class generalisation="c_Transformer" id="c_AbstractTransformer" name="AbstractTransformer" type="abstract"
><description
>This abstract class provides default property values and a parameter list implementation.</description></class></package><package id="p_operators" name="operators"
><description
>This packahe contains Operator implementations.</description></package><package id="p_control" name="control"
><description
>This package contains the control implementation.</description><package id="p_c_io" name="io"
><description
>This package contains the input - output control implementation.</description></package><package id="p_c_operators" name="operators"
><description
>This package implements the operators framework.</description></package><class id="c_EditControlImpl" name="EditControlImpl" type="final"
><description
>This is the editing control implementation.</description></class><class id="c_FileControlImpl" name="FileControlImpl" type="final"
><description
>This is the input / output control implementation.</description></class></package><class generalisation="c_ToolControl" id="c_Tool" name="Tool" type="final"
><description
>This class represent one instance of the tool. Several instances of this class can be managed by the application.</description></class><class id="c_Global" name="Global" type="final"
><description
>This class contains the objects which are common to all tool instances.</description></class></package></schema>