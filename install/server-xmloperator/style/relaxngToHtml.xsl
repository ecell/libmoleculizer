<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="" xmlns="http://www.w3.org/1999/xhtml" xmlns:htm="http://www.w3.org/1999/xhtml" xmlns:rng="http://relaxng.org/ns/structure/1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"><xsl:param name="title"/><xsl:template name="name_and_commonAttributes"><code><xsl:value-of disable-output-escaping="no" select="local-name()"/></code><xsl:if test="@combine | @type | @ns | @datatypeLibrary"><xsl:text disable-output-escaping="no">(</xsl:text><xsl:if test="@combine"><code><xsl:text disable-output-escaping="no">combine=</xsl:text></code><xsl:value-of disable-output-escaping="no" select="@combine"/></xsl:if><xsl:if test="@type"><xsl:if test="@combine"><xsl:text disable-output-escaping="no">, </xsl:text></xsl:if><code><xsl:text disable-output-escaping="no">type=</xsl:text></code><xsl:value-of disable-output-escaping="no" select="@type"/></xsl:if><xsl:if test="@ns"><xsl:if test="@combine| @type"><xsl:text disable-output-escaping="no">, </xsl:text></xsl:if><code><xsl:text disable-output-escaping="no">ns=</xsl:text></code><xsl:text disable-output-escaping="no">&quot;</xsl:text><i><xsl:value-of disable-output-escaping="no" select="@ns"/></i><xsl:text disable-output-escaping="no">&quot;</xsl:text></xsl:if><xsl:if test="@datatypeLibrary"><xsl:if test="@combine | @type | @ns"><xsl:text disable-output-escaping="no">, </xsl:text></xsl:if><code><xsl:text disable-output-escaping="no">datatypeLibrary=</xsl:text></code><xsl:text disable-output-escaping="no">&quot;</xsl:text><i><xsl:value-of disable-output-escaping="no" select="@datatypeLibrary"/></i><xsl:text disable-output-escaping="no">&quot;</xsl:text></xsl:if><xsl:text disable-output-escaping="no">)</xsl:text></xsl:if></xsl:template><xsl:template name="nameClass"><xsl:variable name="nameClass" select="local-name()"/><xsl:call-template name="name_and_commonAttributes"/><xsl:choose><xsl:when test="$nameClass = &quot;name&quot;"><xsl:text disable-output-escaping="no"> </xsl:text><i><xsl:value-of disable-output-escaping="no" select="text()"/></i></xsl:when><xsl:when test="$nameClass = &quot;anyName&quot; or $nameClass = &quot;nsName&quot;"><xsl:for-each select="rng:except"><xsl:text disable-output-escaping="no"> except(</xsl:text><xsl:call-template name="nameClasses"/><xsl:text disable-output-escaping="no">)</xsl:text></xsl:for-each></xsl:when><xsl:when test="$nameClass = &quot;choice&quot;"><xsl:call-template name="nameClasses"/></xsl:when></xsl:choose></xsl:template><xsl:template name="nameClasses"><xsl:for-each select="rng:name | rng:anyName | rng:nsName | rng:choice"><xsl:if test="position() > 1"><xsl:text disable-output-escaping="no"> | </xsl:text></xsl:if><xsl:call-template name="nameClass"/></xsl:for-each></xsl:template><xsl:template name="nameClass_first"><xsl:for-each select="*[namespace-uri()=&quot;http://relaxng.org/ns/structure/1.0&quot;][1]"><xsl:call-template name="nameClass"/></xsl:for-each></xsl:template><xsl:template name="id"><xsl:if test=".."><xsl:for-each select=".."><xsl:call-template name="id"/></xsl:for-each><xsl:text disable-output-escaping="no">_</xsl:text><xsl:value-of disable-output-escaping="no" select="count(preceding-sibling::*)"/></xsl:if></xsl:template><xsl:template name="define_ref"><xsl:param name="define_name"/><xsl:choose><xsl:when test="local-name() = &quot;define&quot;"><xsl:if test="@name = $define_name"><a shape="rect"><xsl:attribute name="href"><xsl:text disable-output-escaping="no">#</xsl:text><xsl:call-template name="id"/></xsl:attribute><xsl:value-of disable-output-escaping="no" select="@name"/></a></xsl:if></xsl:when><xsl:otherwise><xsl:for-each select="*[namespace-uri()=&quot;http://relaxng.org/ns/structure/1.0&quot;][local-name() != &quot;grammar&quot; and local-name() != &quot;include&quot;]"><xsl:call-template name="define_ref"><xsl:with-param name="define_name" select="$define_name"/></xsl:call-template></xsl:for-each></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="external_ref"><xsl:variable name="length" select="string-length(@href)"/><xsl:choose><xsl:when test="substring(@href, $length - 3, $length) = &quot;.rng&quot;"><a href="{concat(substring(@href, 1, $length -4), &quot;.htm&quot;)}" shape="rect"><xsl:value-of disable-output-escaping="no" select="@href"/></a></xsl:when><xsl:otherwise><i><xsl:value-of disable-output-escaping="no" select="@href"/></i></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="grammarContents"><xsl:if test="rng:start | rng:define | rng:div | rng:include"><dd><dl><xsl:apply-templates select="rng:start | rng:define | rng:div | rng:include"/></dl></dd></xsl:if></xsl:template><xsl:template name="pattern"><xsl:variable name="pattern" select="local-name()"/><dt><xsl:call-template name="name_and_commonAttributes"/><xsl:choose><xsl:when test="($pattern = &quot;element&quot;) or ($pattern = &quot;attribute&quot;)"><xsl:text disable-output-escaping="no"> </xsl:text><xsl:choose><xsl:when test="@name"><i><xsl:value-of disable-output-escaping="no" select="@name"/></i></xsl:when><xsl:otherwise><xsl:call-template name="nameClass_first"/></xsl:otherwise></xsl:choose></xsl:when><xsl:when test="$pattern = &quot;ref&quot;"><xsl:text disable-output-escaping="no"> </xsl:text><xsl:variable name="define_name" select="@name"/><xsl:for-each select="ancestor::rng:grammar[1]"><xsl:call-template name="define_ref"><xsl:with-param name="define_name" select="$define_name"/></xsl:call-template></xsl:for-each></xsl:when><xsl:when test="$pattern = &quot;parentRef&quot;"><xsl:text disable-output-escaping="no"> </xsl:text><xsl:variable name="define_name" select="@name"/><xsl:for-each select="ancestor::rng:grammar[2]"><xsl:call-template name="define_ref"><xsl:with-param name="define_name" select="$define_name"/></xsl:call-template></xsl:for-each></xsl:when><xsl:when test="$pattern = &quot;value&quot;"><xsl:text disable-output-escaping="no"> </xsl:text><xsl:text disable-output-escaping="no">&quot;</xsl:text><i><xsl:value-of disable-output-escaping="no" select="text()"/></i><xsl:text disable-output-escaping="no">&quot;</xsl:text></xsl:when><xsl:when test="$pattern = &quot;externalRef&quot;"><xsl:text disable-output-escaping="no"> </xsl:text><xsl:call-template name="external_ref"/></xsl:when></xsl:choose></dt><xsl:choose><xsl:when test="($pattern = &quot;element&quot;) or ($pattern = &quot;attribute&quot;)"><xsl:call-template name="list_pattern"/></xsl:when><xsl:when test="($pattern = &quot;group&quot;) or ($pattern = &quot;interleave&quot;) or ($pattern = &quot;choice&quot;) or ($pattern = &quot;optional&quot;) or ($pattern = &quot;zeroOrMore&quot;) or ($pattern = &quot;oneOrMore&quot;) or ($pattern = &quot;list&quot;) or ($pattern = &quot;mixed&quot;)"><xsl:call-template name="list_pattern"/></xsl:when><xsl:when test="$pattern = &quot;data&quot;"><xsl:if test="rng:param | rng:except"><dd><dl><xsl:for-each select="rng:param"><dt><xsl:call-template name="name_and_commonAttributes"/><xsl:text disable-output-escaping="no"> </xsl:text><i><xsl:value-of disable-output-escaping="no" select="@name"/></i><code><xsl:text disable-output-escaping="no">=</xsl:text></code><i><xsl:value-of disable-output-escaping="no" select="text()"/></i></dt></xsl:for-each><xsl:for-each select="rng:except"><dt><xsl:call-template name="name_and_commonAttributes"/></dt><xsl:call-template name="list_pattern"/></xsl:for-each></dl></dd></xsl:if></xsl:when><xsl:when test="$pattern = &quot;grammar&quot;"><xsl:call-template name="grammarContents"/></xsl:when></xsl:choose></xsl:template><xsl:template name="patterns"><xsl:variable name="skipNameClass" select="(local-name() = &quot;element&quot; or local-name() = &quot;attribute&quot;) and count(@name) = 0"/><xsl:for-each select="*[namespace-uri()=&quot;http://relaxng.org/ns/structure/1.0&quot;][position() >= 1 + $skipNameClass]"><xsl:call-template name="pattern"/></xsl:for-each></xsl:template><xsl:template name="list_pattern"><xsl:variable name="skipNameClass" select="(local-name() = &quot;element&quot; or local-name() = &quot;attribute&quot;) and count(@name) = 0"/><xsl:if test="*[namespace-uri()=&quot;http://relaxng.org/ns/structure/1.0&quot;][position() >= 1 + $skipNameClass]"><dd><dl><xsl:for-each select="*[namespace-uri()=&quot;http://relaxng.org/ns/structure/1.0&quot;][position() >= 1 + $skipNameClass]"><xsl:call-template name="pattern"/></xsl:for-each></dl></dd></xsl:if></xsl:template><xsl:template match="/"><html xmlns="http://www.w3.org/1999/xhtml"><head><title><xsl:value-of select="$title"/></title></head><body><h1><xsl:value-of select="$title"/></h1><dl><xsl:call-template name="patterns"/></dl><hr/></body></html></xsl:template><xsl:template match="rng:start"><dt><xsl:call-template name="name_and_commonAttributes"/></dt><xsl:call-template name="list_pattern"/></xsl:template><xsl:template match="rng:define"><dt><a shape="rect"><xsl:attribute name="id"><xsl:call-template name="id"/></xsl:attribute><xsl:attribute name="name"><xsl:call-template name="id"/></xsl:attribute></a><xsl:call-template name="name_and_commonAttributes"/><xsl:text disable-output-escaping="no"> </xsl:text><b><xsl:value-of disable-output-escaping="no" select="@name"/></b></dt><xsl:call-template name="list_pattern"/></xsl:template><xsl:template match="rng:div"><dt><xsl:call-template name="name_and_commonAttributes"/></dt><xsl:call-template name="grammarContents"/></xsl:template><xsl:template match="rng:include"><dt><xsl:call-template name="name_and_commonAttributes"/><xsl:text disable-output-escaping="no"> </xsl:text><xsl:call-template name="external_ref"/></dt><xsl:call-template name="grammarContents"/></xsl:template></xsl:stylesheet>