//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//
//        This file is part of Libmoleculizer
//
//        Copyright (C) 2001-2008 The Molecular Sciences Institute.
//
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//
// Moleculizer is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
//
// Moleculizer is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with Moleculizer; if not, write to the Free Software Foundation
// Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307,  USA
//
// END HEADER
//
// Original Author:
//   Larry Lok, Research Fellow, Molecular Sciences Institute, 2001
//
// Modifing Authors:
//
//

#ifndef OMNIEXTRAP_H
#define OMNIEXTRAP_H

#include "cpx/cxOmni.hh"
#include "mol/mzrMol.hh"
#include "plex/mzrPlexSpecies.hh"
#include "plex/mzrPlexFamily.hh"
#include "plex/mzrOmniPlex.hh"

namespace ftr
{
    class omniExtrapolator
    {
    public:
        virtual
        ~omniExtrapolator( void )
        {}
        
        // Reactions generated by omniRxnGen can be either unary or binary.  If
        // they are binary, then the additional reactant is independent of the
        // 'triggering species", and so is passed through the extrapolator's
        // constructor.
        virtual
        double
        getRate( const cpx::cxOmni<bnd::mzrMol, plx::mzrPlexSpecies, plx::mzrPlexFamily, plx::mzrOmniPlex>& rContext ) const = 0;
    };
    
    class omniNoExtrap :
        public omniExtrapolator
    {
        double rate;
        
    public:
        omniNoExtrap( double theRate ) :
            rate( theRate )
        {}
        
        double
        getRate( const cpx::cxOmni<bnd::mzrMol, plx::mzrPlexSpecies, plx::mzrPlexFamily, plx::mzrOmniPlex>& rContext ) const
        {
            return rate;
        }
    };
    
    class omniMassExtrap :
        public omniExtrapolator
    {
        // Pointer to "massive" part of optional auxiliary species.  If this is
        // null, then the reactions being generated are unary, and
        // "rateOrInvariant" is an ordinary unary reaction rate.  If this is
        // non-null, then the reactions being generated are binary, and
        // "rateOrInvariant" is a binding invariant.
        const fnd::massive* pMassive;
        
        // This is the rate if the reactions being generated are unary (0 ==
        // pMassive) but it's the binding invariant if the reactions are binary,
        // in which case pMassive points to the auxililary massive species.
        double rateOrInvariant;
        
    public:
        // For creating unary reactions.
        omniMassExtrap( double theRate ) :
            pMassive( 0 ),
            rateOrInvariant( theRate )
        {}
        
        // For creating binary reactions.
        //
        // I hope that I can really make a default species at the time that I
        // create this extrapolator.  (Oddly, never done before.)
        omniMassExtrap( double theRate,
                        const fnd::massive* pDefaultTriggeringSpecies,
                        const fnd::massive* pMassiveAuxiliarySpecies );
        
        double
        getRate( const cpx::cxOmni<bnd::mzrMol, plx::mzrPlexSpecies, plx::mzrPlexFamily, plx::mzrOmniPlex>& rWrappedContext ) const;
    };
}

#endif // OMNIEXTRAP_H
