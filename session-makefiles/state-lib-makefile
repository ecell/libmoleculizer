###############################################################################
# Moleculizer - a stochastic simulator for cellular chemistry.
# Copyright (C) 2001  Walter Lawrence (Larry) Lok.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#    
# Contact information:
#   Larry Lok, Research Fellow          Voice: 510-981-8740
#   The Molecular Sciences Institute      Fax: 510-647-0699
#   2168 Shattuck Ave.                  Email: lok@molsci.org
#   Berkeley, CA 94704
###############################################################################

# This function allows one to construct complicated url's using
# make's text functions, then remove all the whitespace.
concat_url = $(shell concat.pl '$(1)')

# For the time being, there are a few libraries,
# depending on the nature of the entries (moleculizer-input,
# moleculizer-input and state, or rk4tau input).
LIBRARY := $(notdir ${PWD})
LIBRARY_ENTRIES := $(shell ls -d entry-*)

DISPATCH_URL := $(call concat_url, \
	${MOLECULIZER_SERVER}/cgi-bin/mzr-dispatch \
	? library = $(LIBRARY))

LIBRARY_DIR_URL := ${MOLECULIZER_SERVER}/moleculizer/libraries/$(LIBRARY)
LIBRARY_DIR := ${SERVER_HTDOCS_DIR}/moleculizer/libraries/$(LIBRARY)

XSL_DIR := ${MOLECULIZER_DIR}/xml/xsl

LIBRARY_TARGETS := \
	upload-entry \
	download-entry \
	start-session

# Serves as a proxy target when none is needed.
null-target :

upload-entry :
	@echo uploaded moleculizer input and state files.

upload-entry-url := $(call concat_url, $(DISPATCH_URL) \
	& task = lib-upload-two-form \
	& library = $(LIBRARY) \
	& upload-target = moleculizer-input.xml \
	& upload-caption = Moleculizer%20input%20file \
	& upload-target-two = moleculizer-state.xml \
	& upload-caption-two = Moleculizer%20state%20file \
	& comment-target = comment \
	& lib-item-target = item \
	& proxy-target = null-target)

upload-entry-comment := -- Upload moleculizer input and state files.

download-entry :
	@echo downloaded moleculizer-input and moleculizer-state.

download-entry-url := $(call concat_url, $(DISPATCH_URL) \
	& task = display-menu \
	& working-dir = ${PWD} \
	& menu = download-entry.html)

download-entry-comment := -- Download library entry as compressed tar archive.

tar_entry_url = $(call concat_url, $(DISPATCH_URL) \
	& task = tgz \
	& tar-base-dir = $(LIBRARY_DIR) \
	& tar-source = $(1))

define MAKE_DOWNLOAD_ENTRY_ITEM
	echo "<li><p>" >> $@
	echo '<a href="$(call tar_entry_url, $(1))">' >> $@
	cat $(1)/item >> $@
	echo '</a> -- ' >> $@
	cat $(1)/comment >> $@
	echo '</p></li>' >> $@

endef

download-entry.html :
	echo '<?xml version="1.0" encoding="UTF-8"?>' > $@
	echo '<html xmlns="http://www.w3.org/1999/xhtml">' >> $@
	echo "<head><title>Download a library entry</title></head>" >> $@
	echo '<body>' >> $@
	echo '<h1>Download an entry from $(LIBRARY) library.</h1>' >> $@
	echo '<p>Save the link to get everything in a .tgz file.</p>' >> $@
	echo '<hr/><ul>' >> $@
	$(foreach ENTRY, $(LIBRARY_ENTRIES), \
	$(call MAKE_DOWNLOAD_ENTRY_ITEM,$(ENTRY)))
	echo '</ul><hr/>' >> $@
	echo '</body>' >> $@
	echo '</html>' >> $@

start-session :
	@echo started simulation session.

start-session-url :=  $(call concat_url, $(DISPATCH_URL) \
	& task = display-menu \
	& working-dir = ${PWD} \
	& menu = entry-session.html)

start-session-comment := -- Start moleculizer-state wizard session.


ENTRY_SESSION_URL = $(call concat_url, $(DISPATCH_URL) \
	& task = start-library-session \
	& makefile = state-session-makefile \
	& lib-entry = $(1) \
	& proxy-target = upload-input-and-state)

define MAKE_ENTRY_SESSION_ITEM
	echo "<li><p>" >> $@
	echo '<a href="$(call ENTRY_SESSION_URL, $(1))">' >> $@
	cat $(1)/item >> $@
	echo '</a> -- ' >> $@
	cat $(1)/comment >> $@
	echo '</p></li>' >> $@

endef

entry-session.html :
	echo '<?xml version="1.0" encoding="UTF-8"?>' > $@
	echo '<html xmlns="http://www.w3.org/1999/xhtml">' >> $@
	echo "<head><title>Simulate</title></head>" >> $@
	echo '<body>' >> $@
	echo '<h1>Run a simulation from the $(LIBRARY) library.</h1>' >> $@
	echo '<p>Follow the link to start a simulation session with ' >> $@
	echo 'the moleculizer input and state files.</p>' >> $@
	echo '<hr/><ul>' >> $@
	$(foreach ENTRY, $(LIBRARY_ENTRIES), \
	$(call MAKE_ENTRY_SESSION_ITEM, $(ENTRY)))
	echo '</ul><hr/>' >> $@
	echo '</body>' >> $@
	echo '</html>' >> $@


AVAILABLE_TARGETS = $(shell ready-targets.bash $(LIBRARY_TARGETS))

# Generates list item giving link and blurb for session target that is
# ready.
define target-item-html
<li> \
<p> \
<a href="$($(addsuffix -url, $(1)))">$(1)</a> \
$($(addsuffix -comment, $(1))) \
</p> \
</li>
endef

# Generates HTML page of links to make items that are ready (i.e. all their
# prerequisites have been satisfied.)
whats-next.html : 
	echo '<?xml version="1.0" encoding="UTF-8"?>' > $@
	echo '<html xmlns="http://www.w3.org/1999/xhtml">' >> $@
	echo "<head><title>What's next?</title></head>" >> $@
	echo '<body>' >> $@
	echo "<h1>What's next?</h1>" >> $@
	echo '<h2>$(LIBRARY) library</h2>' >> $@
	echo '<hr/><ul>' >> $@
	echo '$(foreach TARGET, $(AVAILABLE_TARGETS), $(call target-item-html, $(TARGET)))' >> $@
	echo '</ul><hr/>' >> $@
	echo '<a href="${MOLECULIZER_SERVER}/moleculizer">Main menu</a>' >> $@
	echo '</body>' >> $@
	echo '</html>' >> $@

menu-clean :
	rm -f whats-next.html download-entry.html start-session.html

clean : menu-clean
	rm -rf $LIBRARY_TARGETS
