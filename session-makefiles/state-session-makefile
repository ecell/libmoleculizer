###############################################################################
# Moleculizer - a stochastic simulator for cellular chemistry.
# Copyright (C) 2001  Walter Lawrence (Larry) Lok.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#    
# Contact information:
#   Larry Lok, Research Fellow          Voice: 510-981-8740
#   The Molecular Sciences Institute      Fax: 510-647-0699
#   2168 Shattuck Ave.                  Email: lok@molsci.org
#   Berkeley, CA 94704
###############################################################################

# This function allows one to construct complicated url's using
# make's text functions, then remove all the whitespace.
concat_url = $(shell concat.pl '$(1)')

# Going along with the idea that the session name and the basename of the
# session directory are the same.
SESSION := $(notdir ${PWD})

# Note that "schema" here depends on the session type!
DISPATCH_URL := $(call concat_url, \
	${MOLECULIZER_SERVER}/cgi-bin/mzr-dispatch \
	? session = $(SESSION) \
	& schema = moleculizer.rng)

SESSION_DIR_URL := ${MOLECULIZER_SERVER}/moleculizer/sessions/$(SESSION)

XSL_DIR := ${MOLECULIZER_DIR}/xml/xsl

SESSION_TARGETS := \
	upload-input-and-state \
	start-state-sim \
	continue-state-sim \
	view-state-sim \
	compress-state-sim \
	download-state-sim \
	generate-rk4tau-input \
	download-rk4tau-input \
	reparametrize-state \
	download-reparametrized-state \
	generate-reparametrized-rk4tau \
	download-reparametrized-rk4tau

# The routine that makes a target also makes a proxy-target for the
# menu system.  Sometimes, there really isn't a proxy-target, so this
# null target is specified instead.
null-target :


upload-input-and-state :
	touch upload-input-and-state

upload-input-and-state-url := $(call concat_url, $(DISPATCH_URL) \
	& task = upload-two-form \
	& upload-target = moleculizer-input.xml \
	& upload-target-two = moleculizer-state.xml \
	& proxy-target = upload-input-and-state \
	& upload-caption = moleculizer-input \
	& upload-caption-two = moleculizer-state)

upload-input-and-state-comment := -- Upload moleculizer-input \
	and moleculizer-state files.


sim-dir : moleculizer-input.xml moleculizer-state.xml
	mkdir sim.start
	touch sim-dir

start-state-sim : sim-dir
	cd sim.start && continuator ../moleculizer-state.xml -t 10 \
	< ../moleculizer-input.xml 2>>../session-log || true
	touch start-state-sim

start-state-sim-url := $(call concat_url, $(DISPATCH_URL) \
	& task = make-target \
	& target = start-state-sim \
	& proxy-target = null-target)

start-state-sim-comment := -- Run simulation from state for 10 seconds.


# Trying to remove timeout-state.xml if the simulation completes
# without timing out, so that the "continue" item doesn't appear if
# the simulation is over.
continue-state-sim : moleculizer-input.xml moleculizer-state.xml \
	sim.start/timeout-state.xml
	cd sim.start && continuator timeout-state.xml -t 10 \
	< ../moleculizer-input.xml 2>>../session-log \
	&& rm timeout-state.xml || true

continue-state-sim-url := $(call concat_url, $(DISPATCH_URL) \
	& task = make-target \
	& target = continue-state-sim \
	& proxy-target = null-target)

continue-state-sim-comment := -- Continue simulation from state for 10 seconds.


view-state-sim : sim.start
	@echo viewed simulation.

view-state-sim-url := $(call concat_url, $(DISPATCH_URL) \
	& task = view-sim \
	& view-sim = sim.start \
	& view-caption = Results%20of%20simulation%20from%20state%20dump.)

view-state-sim-comment := -- Plot current state of simulation from state dump.


compress-state-sim : sim.start
	tar -czf sim.tgz sim.start
	touch continue-state-sim
	touch compress-state-sim
	touch view-state-sim

compress-state-sim-url := $(call concat_url, $(DISPATCH_URL) \
	& task = make-target \
	& target = compress-state-sim \
	& proxy-target = null-target)

compress-state-sim-comment := -- Prepare to download \
	results of simulation from state dump.


download-state-sim : sim.tgz
	@echo download-state-sim is ready.

download-state-sim-url := $(SESSION_DIR_URL)/sim.tgz

download-state-sim-comment := -- Save this link to retrieve \
	simulation from state dump.


generate-rk4tau-input : moleculizer-state.xml
	java org.apache.xalan.xslt.Process \
	-in $< \
	-xsl $(XSL_DIR)/dump2tau.xsl \
	-xml \
	-out state-rk4tau.xml
	touch generate-rk4tau-input

generate-rk4tau-input-url := $(call concat_url, $(DISPATCH_URL) \
	& task = make-target \
	& target = generate-rk4tau-input \
	& proxy-target = null-target)

generate-rk4tau-input-comment := -- Generate rk4tau input from \
	uploaded moleculizer state.


download-rk4tau-input : state-rk4tau.xml
	@echo state-rk4tau.xml ready for download.

download-rk4tau-input-url := $(SESSION_DIR_URL)/state-rk4tau.xml

download-rk4tau-input-comment := -- Save this link to retrieve \
	rk4tau input generated from uploaded moleculizer state.


reparametrize-state : moleculizer-input.xml moleculizer-state.xml
	parametrizer moleculizer-state.xml < varied-input.xml \
	> reparametrized-state.xml
	touch reparametrize-state

reparametrize-state-url := $(call concat_url, $(DISPATCH_URL) \
	& task = variation-form \
	& proxy-target = reparametrize-state \
	& variation-source = moleculizer-input.xml \
	& variation-target = varied-input.xml \
	& variation-caption = \
	Varying%20moleculizer-input%20to%20reparametrize%20moleculizer-state.)

reparametrize-state-comment := -- Vary moleculizer input to \
	reparametrize moleculizer state.


download-reparametrized-state : reparametrized-state.xml
	@echo reparametrized state is ready for download.

download-reparametrized-state-url := \
	$(SESSION_DIR_URL)/reparametrized-state.xml

download-reparametrized-state-comment := -- Save this link to \
	retrieve reparametrized moleculizer state.


generate-reparametrized-rk4tau : reparametrized-state.xml
	java org.apache.xalan.xslt.Process \
	-in $< \
	-xsl $(XSL_DIR)/dump2tau.xsl \
	-xml \
	-out reparametrized-rk4tau.xml
	touch generate-reparametrized-rk4tau

generate-reparametrized-rk4tau-url := $(call concat_url, $(DISPATCH_URL) \
	& task = make-target \
	& target = generate-reparametrized-rk4tau \
	& proxy-target = null-target)

generate-reparametrized-rk4tau-comment := -- Generate rk4tau input \
	from reparametrized state.


download-reparametrized-rk4tau : reparametrized-rk4tau.xml
	@echo ready to download-reparametrized-rk4tau

download-reparametrized-rk4tau-url := \
	$(SESSION_DIR_URL)/reparametrized-rk4tau.xml

download-reparametrized-rk4tau-comment := -- Save this link \
	to retrieve reparametrized rk4tau input.


# This is the critical use of make.  Note that this variable definition
# MUST be an ordinary =, not :=, since otherwise ready-targets.bash
# will be forced to expand AVAILABLE_TARGETS when it runs make -q, ergo
# regressus infinitus.
#
# But make also seems like a good
# way to do the actual simulation tasks, instead of putting them into
# cgi scripts.
AVAILABLE_TARGETS = $(shell ready-targets.bash $(SESSION_TARGETS))

# Generates list item giving link and blurb for session target that is
# ready.
define target-item-html
<li> \
<p> \
<a href="$($(addsuffix -url, $(1)))">$(1)</a> \
$($(addsuffix -comment, $(1))) \
</p> \
</li>
endef

# Generates HTML page of links to make items that are ready (i.e. all their
# prerequisites have been satisfied.)
whats-next.html : 
	echo '<?xml version="1.0" encoding="UTF-8"?>' > $@
	echo '<html xmlns="http://www.w3.org/1999/xhtml">' >> $@
	echo "<head><title>What's next?</title></head>" >> $@
	echo '<body>' >> $@
	echo "<h1>What's next?</h1>" >> $@
	echo '<hr/><ul>' >> $@
	echo '$(foreach TARGET, $(AVAILABLE_TARGETS), \
	$(call target-item-html, $(TARGET)))' >> $@
	echo '</ul><hr/>' >> $@
	echo '<a href="${MOLECULIZER_SERVER}/moleculizer">Main menu</a>' >> $@
	echo '</body>' >> $@
	echo '</html>' >> $@

menu-clean :
	rm -f whats-next.html;

clean :
	rm -rf $SESSION_TARGETS
	rm -f whats-next.html
