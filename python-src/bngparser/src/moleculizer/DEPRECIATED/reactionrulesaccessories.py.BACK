###############################################################################
# BNGMZRConverter - A utility program for converting bngl input files to mzr
#		    input files.
# Copyright (C) 2007 Nathan Addy
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# Contact information:
#   Nathan Addy, Scientific Programmer	Voice: 510-981-8748
#   The Molecular Sciences Institute    Email: addy@molsci.org  
#   2168 Shattuck Ave.                  
#   Berkeley, CA 94704
###############################################################################

import re
import pdb
from bngspeciesdefinition import BngSpeciesInstantiation


class Parser:
    def getFuzzyRegexp(self, regexp):
	return '\s*' + regexp + '\s*'
    
    def matchRegexToken(self, regexToken, string):
	tokenWithWhiteSpace =self.getFuzzyRegexp(regexToken)
	result = re.match(tokenWithWhiteSpace, string)
	if result:
	    return result.group().strip()
	else:
	    return False

    def popRegexMap(self, regexToken, string):
	tokenPlusWhiteSpace = self.getFuzzyRegexp(regexToken)
	res = re.match(tokenPlusWhiteSpace, string)
	if res:
	    match = res.group().strip()
	    string = string[res.end():]
	    return match, string
	else:
	    return False

class ReactionParser(Parser):
    rp_Mol = "\S+"
    rp_Plus = "\+"
    rp_ForwardReaction = "->"
    rp_ReversableReaction = "<->"
    rp_ReactionRate = "[^\s]+"
    rp_ExcludeReaction = "exclude_reactants\S*\)"
    rp_IncludeReaction = "include_reaction\S*\)"
    rp_DeleteMolecules = "DeleteMolecules"

    def __init__(self, reaction, molObject):
	self.molObject = molObject 
	self.reactionstring = reaction
	self.reactants = []
	self.products = []
	self.reversable = []
	self.rates = []
	self.decorators = {}
	self.mustBeBound = []
	reaction = re.sub("^\s*\d*\s*", "", reaction)
	
	# Grab all the reactants from 'reaction'
	reactantStrings = []
	while True:

	    if not self.matchRegexToken(ReactionParser.rp_Mol, reaction):
		raise "Bad Definition"
	    else:
		molString, reaction = self.popRegexMap(ReactionParser.rp_Mol, reaction)
		self.reactants.append(molString)
	    
	    if not self.matchRegexToken(ReactionParser.rp_Plus, reaction):
		break
	    else:
		plusString, reaction = self.popRegexMap(ReactionParser.rp_Plus, reaction)
		
    # Grab the forward/reversable thing.
	if self.matchRegexToken(ReactionParser.rp_ForwardReaction, reaction):
	    reaction = self.popRegexMap(ReactionParser.rp_ForwardReaction, reaction)[1]
	    self.reversable = False
	elif self.matchRegexToken(ReactionParser.rp_ReversableReaction, reaction):
	    reaction = self.popRegexMap(ReactionParser.rp_ReversableReaction, reaction)[1]
	    self.reversable = True
	else:
	    raise "Value Error"

    # Now grab the products
	while True:

	    if not self.matchRegexToken(ReactionParser.rp_Mol, reaction):
		raise "Bad Definition"
	    else:
		molString, reaction = self.popRegexMap(ReactionParser.rp_Mol, reaction)
		self.products.append(molString)
	    
	    if not self.matchRegexToken(ReactionParser.rp_Plus, reaction):
		break
	    else:
		plusString, reaction = self.popRegexMap(ReactionParser.rp_Plus, reaction)
    

	# Grab the first, mandatory reaction rate
	if not self.matchRegexToken(ReactionParser.rp_ReactionRate, reaction):
	    raise "Value Error -- reactionRateMissing"
	reactionRate, reaction = self.popRegexMap(ReactionParser.rp_ReactionRate, reaction)
	self.rates.append(reactionRate)

	if self.reversable:
	    # Grab the second.
	    if not self.matchRegexToken(ReactionParser.rp_ReactionRate, reaction):
		raise "Value error -- missing reaction"
	    reactionRate, reaction = self.popRegexMap(ReactionParser.rp_ReactionRate, reaction)
	    self.rates.append(reactionRate)

	reaction = reaction.strip()
	if reaction:
	    self.analyseTail(reaction)

	# Finally, look at each of the reactants and products to determine if there 
	# are any + bindings present in each of the molecules that should be recorded.

    def getNumberOfBindingsCreated(self):
	lhsBindings = []
	rhsBindings = []
	
	for species in self.reactants:
	    reactantSpecies = BngSpeciesInstantiation(species)
	    lhsBindings.extend([x for x in reactantSpecies.bindings.keys()])

	for species in self.products:
	    productSpecies = BngSpeciesInstantiation(species)
	    rhsBindings.extend([x for x in productSpecies.bindings.keys()])
	
	createdBindings = [x for x in rhsBindings if x not in lhsBindings]
	return len(createdBindings)

    def analyseTail(self, reaction):
	while True:
	    if self.matchRegexToken(ReactionParser.rp_ExcludeReaction, reaction):
		excludeReaction, reaction = self.popRegexMap( ReactionParser.rp_ExcludeReaction, reaction)
		excludeReaction = re.sub('exclude_reactants\(', '', excludeReaction)
		excludeReaction = re.sub('\(', '', excludeReaction)
		self.decorators["excludeReaction"] = excludeReaction
	    elif self.matchRegexToken(ReactionParser.rp_IncludeReaction, reaction):
		includeReaction, reaction = self.popRegexMap(ReactionParser.rp_IncludeReaction, reaction)
		print "include_reaction '%s' not yet handled" % includeReaction
	    elif self.matchRegexToken(ReactionParser.rp_DeleteMolecules, reaction):
		deleteReaction, reaction = self.popRegexMap(ReactionParser.rp_DeleteMolecules, reaction)
		self.decorators["DeleteMolecules"] = True
	    else:
		print "Unhandeled string in reaction: %s" % reaction
	    
	    if not reaction:
		break
    def printrxn(self):
	print "Products: %s" % self.products
	if self.reversable:
	    print "<->"
	else:
	    print "->"
	print "Reactants: %s" % self.reactants
	print self.rates
	for x in self.decorators.keys():
	    print x, self.decorators[x]
	print 
	print 
	print

class MoleculizerReactionRules:
    def __init__(self, molData = ""):
	self.reactionRules = []
	self.molData = molData
	self.reactionRulesByBinding = {}

    def addReactionRules(self, reactionRuleList):
	for rxnStr in reactionRuleList:
	    self.reactionRules.append( ReactionParser(rxnStr, self.molData))

    def addReactionRule(self, reactionRule):
	pdb.set_trace()
	self.reactionRules.append( ReactionParser(reactionRule, self.molData))

    def processAllReactionRules(self):
	for rxn in self.reactionRules:
	    if self.isDimerizationRxn(rxn):
		bindingCreated = self.getBindingCreated(rxn)
		
		if bindingCreated not in self.reactionRulesByBinding.keys():
		    self.reactionRulesByBinding[bindingCreated] = []
		self.reactionRulesByBinding[bindingCreated].append(rxn)

	print "%s binding rules" % len(self.reactionRulesByBinding.keys())
	for x in self.reactionRulesByBinding.keys():
	    print "%s\n\t%s" % (x, len(self.reactionRulesByBinding[x]))


    def isDimerizationRxn(self, rxn):
	return rxn.getNumberOfBindingsCreated()

    def getBindingCreated(self, rxn):
	assert( self.isDimerizationRxn(rxn) )
	
	lhsBindings = []
	rhsBindings = []
	
	for species in rxn.reactants:
	    instance = BngSpeciesInstantiation(species)
	    lhsBindings.extend([x for x in instance.bindings.keys()])


	productSpecies = rxn.products[0]
	theProduct = BngSpeciesInstantiation(productSpecies)

	rhsBindings.extend([x for x in theProduct.bindings.keys()])
	bindingsCreated = [x for x in rhsBindings if x not in lhsBindings]

	if not len(bindingsCreated) == 1:
	    pdb.set_trace()
	    a = 10
	bindingCreated = bindingsCreated[0]

	expandedBindingSite = theProduct.bindings[bindingCreated][:]
	finalBindingSite = []
	for site in expandedBindingSite:
	    molNum, siteName = site
	    molName = theProduct.moleculesInSpecies[molNum]
	    finalBindingSite.append( (molName, siteName))

	finalBindingSite.sort()
	finalBindingSite = tuple(finalBindingSite)
	return finalBindingSite

    def formatReactionRulesBlock(self):
	unprocessedReactionRules = self.reactionRulesBlock[:]
	unprocessedReactionRules = [x.strip() for x in unprocessedReactionRules]
	unprocessedReactionRules = [x for x in unprocessedReactionRules if x != ""]
	unprocessedReactionRules = [x for x in unprocessedReactionRules if not x.startswith("#")]

	self.reactionRulesBlock = []

	lastLineEndsInSlash = False
	currentLineEndsInSlash = False
	fullLine = ""

	for line in unprocessedReactionRules:
	    if line[-1] == "\\":
		currentLineEndsInSlash = True
		line = "".join(line[:-1]) + " "
	    else:
		currentLineEndsInSlash = False

	    fullLine = fullLine + line

	    if not currentLineEndsInSlash:
		self.reactionRulesBlock.append(fullLine)
		fullLine = ""

	    lastLineEndsInSlash, currentLineEndsInSlash = currentLineEndsInSlash, False

	for ndx in range(len(self.reactionRulesBlock)):
	    self.reactionRulesBlock[ndx] = re.sub('^\s*\d*\s', '', self.reactionRulesBlock[ndx])
	
	mzrRxnRules = ReactionRules.MoleculizerReactionRules()
	mzrRxnRules.addReactionRules(self.reactionRulesBlock)
	mzrRxnRules.processAllReactionRules()

