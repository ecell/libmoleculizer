###############################################################################
# Moleculizer - a stochastic simulator for cellular chemistry.
# Copyright (C) 2001  Walter Lawrence (Larry) Lok.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#    
# Contact information:
#   Larry Lok, Research Fellow          Voice: 510-981-8740
#   The Molecular Sciences Institute      Fax: 510-647-0699
#   2168 Shattuck Ave.                  Email: lok@molsci.org
#   Berkeley, CA 94704
###############################################################################

# This function allows one to construct complicated url's using
# make's text functions, then remove all the whitespace.
concat_url = $(shell concat.pl '$(1)')

# Going along with the idea that the session name and the basename of the
# session directory are the same.
SESSION := $(notdir ${PWD})

# Note that "schema" here depends on the session type!
DISPATCH_URL := $(call concat_url, \
	${MOLECULIZER_SERVER}/cgi-bin/mzr-dispatch \
	? session = $(SESSION) \
	& schema = rk4tau.rng)

SESSION_DIR_URL := ${MOLECULIZER_SERVER}/moleculizer/sessions/$(SESSION)

XSL_DIR := ${MOLECULIZER_DIR}/xml/xsl

SESSION_TARGETS := \
	upload-rk4tau-input \
	amend-input-file \
	run-simulation \
	view-batch-queue \
	view-simulation-queue \
	view-simulation-results \
	compress-simulation-results \
	download-compressed-results


# The routine that makes a target also makes a proxy-target for the
# menu system.  Sometimes, there really isn't a proxy-target, so this
# null target is specified instead.
null-target :


upload-rk4tau-input :
	touch upload-rk4tau-input

upload-rk4tau-input-url := $(call concat_url, $(DISPATCH_URL) \
	& task = upload-form \
	& upload-target = rk4tau-input.xml \
	& proxy-target = upload-rk4tau-input \
	& upload-caption = Upload%20rk4tau%20input%20file.)

upload-rk4tau-input-comment := -- Upload rk4tau input file.


# Note this is touched by run-simulation below.
amend-input-file : rk4tau-input.xml
	@echo amended input file.

amend-input-file-url := $(call concat_url, $(DISPATCH_URL) \
	& task = variation-form \
	& variation-source = rk4tau-input.xml \
	& variation-target = rk4tau-input.xml \
	& proxy-target = amend-input-file \
	& variation-caption = Amend%20rk4tau-input%20file.)

amend-input-file-comment := -- Change parameters in input file.



Q_JOB_DIR := rk4tau-input.queued
ACTUAL_JOB_DIR := ${MOLECULIZER_DIR}/server/sessions/$(SESSION)/$(Q_JOB_DIR)

# Write the file that batch uses to run a job.
batch-submit-file :
	mkdir $(Q_JOB_DIR)
	chmod a+rwx $(Q_JOB_DIR)
	cp rk4tau-input.xml $(Q_JOB_DIR)
	echo "cd $(Q_JOB_DIR)" > $@
	echo "echo Started rk4tau job at " `date` '>> job.out' >> $@
	echo -n "${MOLECULIZER_DIR}/bin/rk4tau " >> $@
	echo -n "< rk4tau-input.xml " >> $@
	echo -n "> job.out " >> $@
	echo "2> job.err " >> $@
	echo "touch done" >> $@

run-simulation : rk4tau-input.xml
	touch run-simulation
	touch amend-input-file

run-simulation-url := $(call concat_url, $(DISPATCH_URL) \
	& task = batch-submit-form \
	& proxy-target = run-simulation)

run-simulation-comment := -- Run simulation as a batch job.


view-batch-queue :
	@echo listed batch queue

view-batch-queue-url := $(call concat_url, \
	${MOLECULIZER_SERVER}/cgi-bin/mzr-dispatch \
	? task = batch-list)

view-batch-queue-comment := -- Display simulation queue, old sessions, etc.


view-simulation-results : $(Q_JOB_DIR)
	@echo viewed simulation results

view-simulation-results-url := $(call concat_url, $(DISPATCH_URL) \
	& task = view-sim \
	& view-sim = $(Q_JOB_DIR) \
	& view-caption = Simulation%20results)

view-simulation-results-comment := -- (Re)plot current state of queued simulation.


compress-simulation-results : $(Q_JOB_DIR)/done
	tar -czf $(SESSION).tgz $(Q_JOB_DIR)
	touch compress-simulation-results

compress-simulation-results-url := $(call concat_url, $(DISPATCH_URL) \
	& task = make-target \
	& target = compress-simulation-results \
	& proxy-target = null-target)

compress-simulation-results-comment := -- Compress output for download.


download-compressed-results : $(SESSION).tgz
	@echo downloaded compressed results

download-compressed-results-url := $(SESSION_DIR_URL)/$(SESSION).tgz

download-compressed-results-comment := -- Save this link for compressed simulation results.


# This is the critical use of make.  Note that this variable definition
# MUST be an ordinary =, not :=, since otherwise ready-targets.bash
# will be forced to expand AVAILABLE_TARGETS when it runs make -q, ergo
# regressus infinitus.
#
# But make also seems like a good
# way to do the actual simulation tasks, instead of putting them into
# cgi scripts.
AVAILABLE_TARGETS = $(shell ready-targets.bash $(SESSION_TARGETS))

# Generates list item giving link and blurb for session target that is
# ready.
define target-item-html
<li> \
<p> \
<a href="$($(addsuffix -url, $(1)))">$(1)</a> \
$($(addsuffix -comment, $(1))) \
</p> \
</li>
endef

# Generates HTML page of links to make items that are ready (i.e. all their
# prerequisites have been satisfied.)
whats-next.html : 
	echo '<?xml version="1.0" encoding="UTF-8"?>' > $@
	echo '<html xmlns="http://www.w3.org/1999/xhtml">' >> $@
	echo "<head><title>What's next?</title></head>" >> $@
	echo '<body>' >> $@
	echo "<h1>What's next?</h1>" >> $@
	echo '<hr/><ul>' >> $@
	echo '$(foreach TARGET, $(AVAILABLE_TARGETS), $(call target-item-html, $(TARGET)))' >> $@
	echo '</ul><hr/>' >> $@
	echo '<a href="${MOLECULIZER_SERVER}/moleculizer">Main menu</a>' >> $@
	echo '</body>' >> $@
	echo '</html>' >> $@

menu-clean :
	rm -f whats-next.html;

clean :
	rm -rf $SESSION_TARGETS
	rm -f whats-next.html
